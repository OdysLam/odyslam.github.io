<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog.py</title>
    <description></description>
    <link>https://odyslam.me/blog/</link>
    <atom:link href="https://odyslam.me/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 31 Jul 2020 13:00:04 +0300</pubDate>
    <lastBuildDate>Fri, 31 Jul 2020 13:00:04 +0300</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Jumping to a startup straight from a Greek University Part 1 [GR]</title>
        <description>&lt;h1 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h1&gt;

&lt;p&gt;This is part of a blog-post series that is intended for Greek university students and recent graduates. Thus I wrote them in greek to maximise impact. I might translate them for future reference.&lt;/p&gt;

&lt;h1 id=&quot;εισαγωγή&quot;&gt;Εισαγωγή&lt;/h1&gt;

&lt;p&gt;Αυτό είναι ένα άρθρο που ήθελα να γράψω καιρό, καθώς πρόσφατα πέρασα από την ενδιαφέρουσα εμπειρία να πρέπει να &lt;strong&gt;μεταβώ&lt;/strong&gt; από τον χώρο του πανεπιστημίου στον εργασιακό χώρο και πιο συγκεκριμένα, στον χώρο των νεοφυών επιχειρήσεων, λαικιστί startups.&lt;/p&gt;

&lt;p&gt;Οι απαιτήσεις για την συγκεκριμένη μετάβαση είναι αρκετά διαφορετικές από αυτές που περιμένει ένας φοιτητής, και ο λόγος είναι πολύ απλός. Το ελληνικό πανεπιστήμιο,πλην κάποιον εξαιρέσεων, μπορεί να δίνει θεωρητικές γνώσεις υψηλού επιπέδου στους φοιτητές, όμως δεν αναπτύσει δεξιότητες που είναι απαραίτητες για τον επαγγελματικό κόσμο. Μπορεί να σπουδάζει κάποιος στο πολυτεχνείο, αλλά μόνο ένας σχετικά μικρός αριθμός μαθημάτων θα οδηγήσει τους φοιτητές να φτιάξουν κάτι ή να λύσουν ένα υπαρκτό πρόβλημα σε πραγματικές συνθήκες.&lt;/p&gt;

&lt;p&gt;Στο άρθρο αυτό θα προσπαθήσω να παραθέσω μερικά πράγματα που έμαθα στην προσπάθεια μου να μπω στον κόσμο των εταιρειών υψηλής τεχνολογίας και γιατι αξίζει ο κόπος που απαιτείται για να τα καταφέρεις σε σχέση με τις πολύ πιο βατές απαιτήσεις από μια παραδοσιακή εταιρεία τεχνολογίας.&lt;/p&gt;

&lt;p&gt;Το άρθρο καθώς αποδείχθηκε αρκετά μεγάλο, θα χωριστεί σε διαφορετικα blog posts. Αυτό είναι το πρωτο. Enjoy 🙂&lt;/p&gt;

&lt;h1 id=&quot;high-tech-startups&quot;&gt;High-tech startups&lt;/h1&gt;

&lt;p&gt;Ως startup, αν και γενικότερα δεν έχει σαφή ορισμό, μιλάμε για μια εταιρία που λύνει ένα πρόβλημα με έναν καινούργιο τρόπο, δηλαδή εξ’ορισμού πηγαίνει σε αχαρτογράφητα νερά. Η καινοτομία δεν είναι ανάγκη να είναι τεχνολογική, αλλά μπορεί να είναι στο επιχειρηματικό πλάνο, στον τρόπο επικοινωνίας ή στο brand. Ένα εξίσου βασικό χαρακτηριστικό που θα κρατήσουμε είναι η εκθετική ανάπτυξη που έχουν σε περίπτωση επιτυχίας, θα δείτε γιατί.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.issuelab.org/resources/15236/15236.pdf&quot;&gt;Εδώ&lt;/a&gt; μπορείτε να βρείτε μια ενδιαφέρουσα &lt;strong&gt;σύντομη&lt;/strong&gt; εργασία από τον Καθηγητή του MIT Bill Aulet σχετικά με τις διαφορές μιας startup και μιας Μικρο-Μεσαίας Επιχείρησης ή SME(Small-Medium Enterprise).&lt;/p&gt;

&lt;p&gt;Στην Ελλάδα, αν και υπάρχουν κάποιες εταιρείες υψηλής τεχνολογίας που προσφέρουν ένα μοντέρνο εργασιακό περιβάλλον, χωρίς να θεωρούνται πλέον startups (e.g beat, efood, skroutz), εμείς θα ασχοληθούμε με δύο άλλα είδη εταιρειών:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Τις εταιρείες που βρίσκονται κυρίως στο εξωτερικό και προσλαμβάνουν για remote θέσεις&lt;/li&gt;
  &lt;li&gt;Τις εταιρείες που έχουν κάποια άτομα στην Ελλάδα αλλά έχουν αρκετά άτομα και στο εξωτερικό&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Αυτό μας εξασφαλίζει κάποια συγκεκριμένα πράγματα:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Η αγορά που απευθύνονται δεν είναι η Ελληνική (πολύ μικρή), άρα και ο διαθέσιμος χώρος για ανάπτυξη δεν έχει κάποιο (άμεσο) ταβάνι&lt;/li&gt;
  &lt;li&gt;Έχουν πρόσβαση σε ανθρώπινο δυναμικό και εκτός Ελλάδας&lt;/li&gt;
  &lt;li&gt;Έχουν μια πιο παγκοσμιοποιημένη εργασιακή κουλτούρα&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Τα οποία μεταφράζονται σε 4 πολύ συγκεκριμένα &lt;strong&gt;πλεονεκτήματα&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Καθώς η εταιρεία προσλαμβάνει και εκτός ελλαδικού χώρου, ο βασικός μισθός μέσα στην εταιρεία θα είναι πολύ πολύ υψηλός. Έτσι, όταν θα μειωθεί λόγω της φτηνής ζωής στην Ελλάδας, θα είναι και πάλι πολύ υψηλός για τα ελληνικα δεδομένα (2.000$+). Αυτό έρχεται σε αντίθεση με τις εταιρείες που δραστηριοποιούνται κυρίως στην Ελλάδα. Γιατι, καθώς οι θέσεις απευθύνονται στην τοπική-ελληνική αγορά, αντίστοιχα και οι αποδοχές είναι θα τοπικές, καθώς δεν τους ενδιαφέρει να προσεγγίσουν έναν αντίστοιχο επαγγελματία στην Βαρκελώνη ή στο Λονδίνο.&lt;/li&gt;
  &lt;li&gt;Στην εταιρεία θα έρθεις αντιμέτωπος με ανθρώπους από διαφορετικές κουλτούρες και επαγγελματικές σταδιοδρομίες, θα είναι δηλαδή μια &lt;strong&gt;πολύ&lt;/strong&gt; εκπαιδευτική διαδικασία, κάτι που αποτελεί αυτοσκοπό στην αρχή της επαγγελματικής σου καριέρας.&lt;/li&gt;
  &lt;li&gt;Καθώς οι startups συνήθως είναι μικρές (δεκάδες άτομα), οι διαδικασίες και οι δομές θα είναι πολύ πιο…ρευστές. Έτσι θα έχεις την ευκαιρία να συμμετέχεις και να “δεις” πολλά περισσότερα πράγματα από τον στενό ρόλο που έχεις στην εταιρία.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Skin in the game&lt;/strong&gt;: Ως αντίβαρο στην μεγάλη επαγγελματική αβεβαιότητα των startups (μεγάλη πίεση, αβέβαιο αποτέλεσμα) είναι η συνήθης πρακτική να παρέχονται μετοχές στους εργαζομένους σε ένα βάθος χρόνου. Όσο πιο νωρίς, τόσο πιο πολλές. Σε περίπτωση που η εταιρία πουληθεί ή βγει στο χρηματιστήριο, οι μετοχές αυτές μπορεί να αποτελέσουν το σπίτι των ονείρων σου. Φυσικά μιλάμε για πιθανότητες κάτω από το 10%.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Φυσικά, αυτό σημαίνει πως ο πήχης ανεβαίνει &lt;strong&gt;υψηλότερα&lt;/strong&gt;, καθώς πλέον ανταγωνιζόμαστε άτομα από ολόκληρο τον κόσμο.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media2.giphy.com/media/GG2UAv9uRblny/giphy.gif?cid=ecf05e4773r56eq9eip1j8uh07sve72hlfluuwaz3mmkjq3l&amp;amp;rid=giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Άσχετα όμως από την ανάπτυξη της startup και τις προοπτικές της, αυτό που την κάνει τόσο ιδιαίτερη σαν εμπειρία, είναι το περιβάλλον της. Καθώς, η ομάδα είναι μικρή και το προϊόν σε πρώιμη μορφή, όπως αναφέραμε, θα έχουμε την δυνατότητα να δούμε πολλά περισσότερα πράγματα, να πάρουμε πληθώρα ερεθισμάτων από πολλές διαφορετικές επιστήμες και γνωστικά αντικείμενα. Όμως, ίσως το πιο σημαντικό έγκειται στο γεγονός οτί έχουμε άμεσο αποτέλεσμα στο προϊόν που φτιάχνεται. Ώς άτομα, βλέπουμε την προσφορά μας να παίρνει σάρκα και οστά στα χαρακτηριστικά του προϊόντος και ουσιαστικά ζούμε την χαρά την δημιουργίας που ζούν και οι τεχνίτες. Μας επιτρέπει να αφοσιοθούμε πλήρως σε κάτι και να το δούμε από την απαρχή του μέχρι την ολοκλήρωση του, έχουμε άμεση σύνδεση με το τελικό αποτέλεσμα.&lt;/p&gt;

&lt;p&gt;Αυτό από μόνο του, έχει &lt;a href=&quot;https://zapier.com/blog/master-your-work/&quot;&gt;αποδειχθεί&lt;/a&gt; πως έχει μεγάλη επίδραση στην ευτυχία του ατόμου. Είναι ο λόγος που βλέπουμε τεχνίτες να καταπιάνονται με “άχρηστα” πράγματα για ώρες, είναι μια κατάσταση που εάν δεν την ζήσουμε, δεν μπορούμε να ξέρουμε τι χάνουμε. Φυσικά, το ίδιο γίνεται και στην περίπτωση που απλά φτιάξουμε ένα πρότζεκτ ανοικτού κώδικα και το ανεβάσουμε στο Github, ή γράψουμε ένα κείμενο (κάλη ώρα). Όμως, αντί να ξοδεύουμε ένα κομμάτι του χρόνου μας σε αυτό, αφιερώνουμε το σύνολο της καθημερινότητας μας (τουλάχιστον 8 ώρες) σε μια διαδικασία βαθιά δημιουργική και βαθιά εκπληρωτική.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://interiordecoration.eu/wp-content/uploads/2019/03/Celebrate-Craftsmanship-With-The-Most-Exquisite-Italian-Arts-And-Crafts-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;τι-έμαθα&quot;&gt;Τι έμαθα&lt;/h1&gt;

&lt;p&gt;Το πιο ενδιαφέρον πράγμα που έμαθα μέσα από αυτή την διαδικασία, είναι ότι στους junior, δηλαδή άτομα με 0-2 χρόνια εμπειρία, δεν ψάχνουν τόσο γνώσεις σχετικά με τον ρόλο, όσο δευτερεύοντα χαρακτηριστικά όπως διάθεση για μάθηση, πρωτοβουλία και επίλυση προβλημάτων (ας είναι και μικρά).&lt;/p&gt;

&lt;p&gt;Μπορείς να το παρατηρήσεις και σε όλο την διαδικασία της πρόσληψης. Εδώ υπάρχουν και αρκετές διαφορές της διαδικασίας που ακολουθούν οι “κολοσσοί” του χώρου και οι startups.&lt;/p&gt;

&lt;p&gt;Οι πρώτοι έχουν έναν πιο τεκμηριωμένο τρόπο ξεσκαρταρισματος με τεστ λογικής και συγκεκριμένες ερωτήσεις πάνω σε τεχνολογία. Αυτή η μέθοδος είναι &lt;strong&gt;παράδοξη&lt;/strong&gt;, γιατί προκαλεί άγχος στους υποψηφίους και δεν αναδεικνύει πραγματικά τις ικανότητες τους καθώς όλοι γνωρίζουν ότι ένας junior developer δεν έχει μάθει πράγματα απέξω και ούτε πρέπει. Οφείλει να ξέρει να δουλεύει και να έχει γενικές γνώσεις για το αντικείμενο και το πιο σημαντικό; &lt;strong&gt;Όρεξη&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Αυτό φυσικά ισχύει και για οποιαδήποτε άλλη θέση, είτε είναι πωλήσεις, είτε μάρκετινγκ και ανάπτυξη προϊόντος.&lt;/p&gt;

&lt;p&gt;Ακόμα και για πιο έμπειρες θέσεις, το νέο μοντέλο πρόσληψης δίνει έμφαση σε take-away projects και στο portfolio του προγραμματιστή, καθώς με το ιντερνετ και την πληροφορία που περιέχει, το σημαντικό δεν είναι να γνωρίζουμε μια πληροφορία απ έξω, αλλά ν&lt;strong&gt;α μπορούμε να την βρούμε γρήγορα και να την εφαρμόσουμε σωστά στο πρόβλημα μας.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Μια διαφορετική φιλοσοφία έχουν οι startups. Πολύ συχνά μιλάς με τον CEO ή υψηλόβαθμα στελέχη και η συνέντευξη παίρνει μορφή συζήτησης. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Τι νομίζεις για αυτό; Έχουμε αυτό το προιον Χ, έχεις καμιά ιδέα πως θα το έκανες καλύτερο;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Έτσι καταλαβαίνουν πιο αποδοτικά (και πιο ποιοτικά) τις γνώσεις, την οξυδέρκεια και την όρεξη του υποψηφίου. Το μικρό τους μέγεθος και η ελαχιστοποίηση του ρίσκου, τους οδηγούν σε μια διαδικασία καλύτερη, αν και δύσκολα εφαρμόσιμη σε μια εταιρεία εκατοντάδων ή χιλιάδων ανθρώπων.&lt;/p&gt;

&lt;p&gt;Δηλαδή η προετοιμασία δεν πρέπει να γίνει τόσο στις γνώσεις σχετικά με το αντικείμενο, αλλά στο γενικότερο επαγγελματικό προφίλ, τρόπο σκέψης και τρόπο προσέγγισης ενός προβλήματος.&lt;/p&gt;

&lt;h2 id=&quot;τι-άτομα-ψάχνουν&quot;&gt;Τι άτομα ψάχνουν&lt;/h2&gt;
&lt;p&gt;Φυσικά και εάν είσαι μηχανικός οφείλεις να γνωρίζεις τις τεχνολογίες τις οποίες ζητάει η εταιρία και ιδανικά να νιώθεις άνετα με αυτές. Αντίστοιχα, στην ανάπτυξη προιόντος, θέλουν να δουν πως γνωρίζεις τα βασικά στάδια, κάποιες καλές πρακτικές καθώς και να έχεις ένα γενικό μοντέλο στο μυαλό σου. Πράγματα δηλαδή, που γίνονται εύκολα κατανοητά με την ανάγνωση 1-2 βιβλίων σχετικών με το χώρο.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.martzoukos.com/posts/jumping-into-product-management&quot;&gt;Εδώ&lt;/a&gt; μπορείς να βρείς μερικά εξαιρετικά βιβλία για να ξεκινήσεις την πορεία σου στο Product Management.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Το πιο σημαντικό όμως που ψάχνουν, είναι να δουν το προφίλ του “&lt;strong&gt;δημιουργού&lt;/strong&gt;” (builder).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ενός ανθρώπου δηλαδή που ξέρει να βρίσκει λύσεις σε προβλήματα και που θέλει να δημιουργεί αξία σε τρίτους. Που θέλει να μάθει και ξέρει να μαθαίνει μόνος του, γρήγορα.&lt;/p&gt;

&lt;p&gt;Γνωρίζουν πως οι τεχνικές γνώσεις σου είναι περιορισμένες. Όμως, θα ξενυχτήσεις 3 ημέρες ωστέ να βρεις λύση σε ένα πρόβλημα που έχεις; Θα έχεις όρεξη να μάθεις ότι σου δώσουν;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Διάθεση&lt;/strong&gt; και &lt;strong&gt;πάθος&lt;/strong&gt; είναι τα κύρια χαρακτηριστικά που οι εργοδώτες θέλουν να δουν στους juniors, ειδικά στο περιβάλλον των startups, καθώς οι juniors αποτελούν επενδύσεις για το μέλλον της εταιρείας.&lt;/p&gt;

&lt;p&gt;Αυτά τα δύο χαρακτηριστικά (ασαφή λίγο) φαίνονται συνήθως σε συνδιασμό άλλων χαρακτηριστικών που ορίζονται λίγο πιο εύκολα:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Πρωτοβουλία&lt;/strong&gt;: Πήρες πρωτοβουλία για να ξεκινήσεις κάτι; Ίσως να είχες ένα θέμα και να αποφάσισες να το λύσεις και να μοιραστείς την λύση σου. Ίσως να ξεκίνησες έναν οργανισμό. Η πρωτοβουλία είναι εξαιρετικά σημαντική καθώς δείχνει πως εάν μας δοθεί μια γενική κατεύθυνση ή ένα πρόβλημα, εμείς μπορούμε να χαράξουμε τον δρόμο προς την επίλυση του.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ικανότητα Μάθησης (learning agility)&lt;/strong&gt;: Έχεις μάθει τεχνολογίες μόνος σου; Έχεις συμμετάσχει σε πρότζεκτ ανοικτού κώδικα ή σε τεχνολογικούς διαγωνισμούς;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Επίλυση προβλημάτων&lt;/strong&gt;: Βλέπεις ένα στενό τεχνολογικό πρόβλημα; Μήπως βλέπεις μόνο μια πώληση ή κατανοείς ολιστικά το πρόβλημα που έχεις μπροστά σου;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ηγετικότητα&lt;/strong&gt;: Έχεις διαχειριστεί ποτέ ομάδα στο παρελθόν;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Όμως, πως μπορούμε να αποδείξουμε όσα έχουμε αναφέρει μέχρι τώρα; Για να το καταφέρουμε, θα χρειαστεί να έχουμε κάποια τεκμήρια της δουλειάς μας μέχρι τώρα.&lt;/p&gt;

&lt;h3 id=&quot;τεκμήρια&quot;&gt;Τεκμήρια&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/VqhurI7.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
My gihub Portfolio ☝️&lt;/p&gt;

&lt;p&gt;Όπως ανέφερα, χρειαζόμαστε τεκμήρια, δηλαδή ένα &lt;strong&gt;πορτφόλιο (portfolio)&lt;/strong&gt;, όπως ακριβώς ένας φωτογράφος. Ανάλογα με την δεξιότητα που θέλουμε να αποδείξουμε, αλλάζει και  το τεκμήριο που πρέπει να παραθέσουμε.&lt;/p&gt;

&lt;p&gt;Οι ηγετικές ικανότητες και η ικανότητα μας για συνεργασία σε μια ομάδα, φαίνεται μέσα από την συμμετοχή μας σε ομάδες (π.χ φοιτητικοί οργανισμοί) και τα αποτελέσματα αυτών κατά την διάρκεια της συμμετοχής μας. Οι &lt;strong&gt;κουλτούρα του δημιουργού&lt;/strong&gt; και η δυνατότητα επίλυσης προβλημάτων φαίνεται μέσα από την συμμετοχή μας σε τεχνολογικά πρότζεκτ. Τα προσεγγίζουμε μόνο από τον στενά τεχνολογικό φακό, ή αντιλαμβανόμαστε τον χρήστη και το πρόβλημα που λύνουμε;&lt;/p&gt;

&lt;p&gt;Δημιουργήσαμε ένα πρότζεκτ από την αρχή (πρωτοβουλία) και το μοιραστήκαμε στο Ιντερνετ ή απλά συμμετείχαμε σε ένα υπάρχον συμβάλοντας με κώδικα; Μήπως συμμετείχαμε ενεργά και στην κοινότητα και παρήγαμε βοηθητικό υλικό; Μήπως δώσαμε ομιλίες με σκοπό να βοηθήσουμε και άλλους να αποκτήσουν σχετικές δεξιότηες;&lt;/p&gt;

&lt;p&gt;Όλα τα παραπάνω αποτελούν τεκμήρια.&lt;/p&gt;

&lt;p&gt;Εάν είσαι μηχανικός, είναι πολύ απλό να ξεκινήσεις. Ανέβασε στο &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt; όλα σου τα πρότζεκτ, το καθένα στο δικό του repository και δημιούργησε ένα δωρεάν website (π.χ &lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt;) που θα μπορεί ο άλλος να περιηγηθεί εύκολα.&lt;/p&gt;

&lt;p&gt;Δεν γράφεις κώδικα; Κανέναν πρόβλημα, βρες άλλο τρόπο να λύσεις προβλήματα και να δημιουργήσεις αξία. Ίσως να φτιάξεις μια επιχειρηματική στρατηγική, ίσως κάποιο γραφιστικό. Αν και σίγουρα είναι πιο εύκολο (προσβάσιμο) αν είσαι μηχανικός, δυστυχώς χωρίς τεκμήρια, δύσκολο να προσληφθεί ένας junior σε μια high tech startup δεδομένω του παγκόσμιου ανταγωνισμού.&lt;/p&gt;

&lt;h3 id=&quot;bonus-points&quot;&gt;Bonus points&lt;/h3&gt;

&lt;p&gt;Το καλύτερο που μπορούμε να κάνουμε για να τραβήξουμε το ενδιαφέρον σε κάποια εταιρεία ή πρότζεκτ, είναι να δώσουμε αξία πριν καν μας προσλάβουν. Ειδικά στην περίπτωση που δεν έχουμε κάποια σχετική προ-υπηρεσία ή εμπειρία σε άλλα πρότζεκτ.&lt;/p&gt;

&lt;p&gt;Μερικές ιδέες για τεχνικές θέσεις:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Το προτζεκτ έχει ένα κομμάτι ανοικτού κώδικα και βρίσκεται στο Github: Πολύ εύκολο, ξεκίνα να λύνεις τα issues μέσα από PRs. Έαν και το documentation βρίσκεται στο Github, πρότεινε βελτιώσεις στην διατύπωση, στα παραδείγματα κλπ.&lt;/li&gt;
  &lt;li&gt;Εάν το πρότζεκτ δεν βρίσκεται στο github, μπορείς να χρισημοποιήσεις το προιόν για να λύσεις κάποιο πρόβλημα και να γράψεις ενα κείμενο για την εμπειρία σου και πως μπορεί κάποιος να κάνει το ίδιο.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;send-the-message---στείλε-το-μήνυμα&quot;&gt;Send the Message - Στείλε το μήνυμα&lt;/h3&gt;

&lt;p&gt;Συνήθως αν και γνωρίζουμε πως ένα συγκεκριμένο άτομο μπορεί να αποτελέσει το κλειδί για τον στόχο μας, είτε γιατί εργάζεται σε μια εταιρεία, είτε γιατί γνωρίζει ένα θέμα πολύ καλά, φοβόμαστε να του στείλουμε ένα μήνυμα. Αυτό, γιατί πολύ απλά προδικάζουμε οτι η απάντηση θα είναι αρνητική.&lt;/p&gt;

&lt;p&gt;Όμως, οι άνθρωποι είναι πολύ πιο πρόθυμοι για να προσφέρουν από ότι νομίζουμε και συνήθως ένα μήνυμα είναι αρκετό για να συμφωνήσουν να μας προσφέρουν απλόχερα τον χρόνο τους. Το μόνο που έχουμε να κάνουμε είναι να είμαστε &lt;strong&gt;ξεκάθαροι&lt;/strong&gt; γιατί θέλουμε την βοήθεια τους και &lt;strong&gt;τι ακριβώς βοήθεια ή πληροφορία&lt;/strong&gt; θέλουμε. Είναι σημαντικό να δείξουμε πως έχουμε κάνει την προεργασία μας, γιατί έτσι φαίνεται πως εκτιμάμε τον χρόνο που μας προσφέρουν απλόχερα.&lt;/p&gt;

&lt;p&gt;Γι’ αυτό εάν θέλετε πολύ να μπείτε σε μια εταιρεία, βρείτε άτομα που δουλεύουν ήδη εκεί και στείλτε ένα μήνυμα (π.χ μέσω linkedin). Ρωτήστε για την δουλειά τους, τι προκλήσεις έχουν αυτοί προσωπικά και η εταιρεία συνολικά. Ρωτήστε τι άτομα ζητάνε συνήθως, πείτε πόσο ενδιαφέρεστε να μπείτε στην ομάδα και ρωτήστε την γνώμη τους σχετικά με το πως να προετοιμαστείτε καλύτερα.&lt;/p&gt;

&lt;p&gt;Ρωτώντας για τις προκλήσεις που αντιμετωπίζουν, μας επιτρέπει να δουλέψουμε πάνω σε αυτές, δημιουργώντας κάποιες λύσεις (έστω και βασικές). Δημιουργώντας έτσι αξία για αυτά τα άτομα, μπορούμε να είμαστε σίγουροι πως όχι μόνο θα μας προτείνουν σε περίπτωση που υπάρχει κάποια ανοικτή θέση, αλλά και θα μας ενημερώσουν εάν στο μέλλον υπάρξει κάποιο άνοιγμα.&lt;/p&gt;

&lt;p&gt;Ο λόγος είναι απλός, άσχετα από την τεχνική ποιότητα της λύσης, τους έχουμε δείξει στο πιο απλό επίπεδο, πως είμαστε άτομα που μας αρέσει να δίνουμε πριν πάρουμε, που βοηθάμε χωρίς να περιμένουμε να δούμε αντίκρισμα. &lt;strong&gt;Ο χαρακτήρας συχνά αποτελεί πιο δυνατό χαρτί από κάθε δεξιότητα.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Το καλό με την παραπάνω προσέγγιση είναι πως η λύση δεν είναι ανάγκη να αφορά ένα τεχνολογικό πρόβλημα, αλλά μπορεί να αφορά και business development, human resources, sales και οτιδήποτε άλλο.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Όλοι θέλουν ένα άτομο στην ομάδα που είναι έτοιμο να δώσει πρίν πάρει, που βοηθάει χωρίς να περιμένει κάποιο αντίτημο.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;to-be-continued&quot;&gt;To be continued&lt;/h1&gt;

&lt;p&gt;Στο επόμενο ποστ θα μιλήσουμε για το δίκτυο, πως το φτιάχνουμε, για το βιογραφικό και άλλα. Θέλω να ευχαριστήσω τον &lt;a href=&quot;https://www.linkedin.com/in/harry-touloupas/&quot;&gt;Χάρη Τουλούπα&lt;/a&gt; για τις εύστοχες προσθήκες του και τον &lt;a href=&quot;https://www.linkedin.com/in/entomprozis&quot;&gt;Βαγγέλη Ντομπρόζη&lt;/a&gt; για τις διορθώσεις του.&lt;/p&gt;

&lt;p&gt;Ευχαριστώ για την ανάγνωση&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2020 00:00:00 +0300</pubDate>
        <link>https://odyslam.me/blog/greek-uni-startup/</link>
        <guid isPermaLink="true">https://odyslam.me/blog/greek-uni-startup/</guid>
        
        <category>2020</category>
        
        <category>self-improvement</category>
        
        <category>career</category>
        
        
      </item>
    
      <item>
        <title>Home webserver setup on a Raspberry pi 4 using balena and Nginx</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In this post, we will be using a spare Raspberry pi 4 to host our very own &lt;em&gt;website&lt;/em&gt; using the internet connection of our house.&lt;/p&gt;

&lt;p&gt;We will start with some introductory terms to get a lay of the land and then we will continue with the tutorial itself.&lt;/p&gt;

&lt;p&gt;If you are familiar with the relevant terms (&lt;em&gt;IP, Domain Name&lt;/em&gt;, etc.), go ahead and jump to &lt;a href=&quot;#lets-get-to-it&quot;&gt;Let’s get to it&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;static-website&quot;&gt;Static Website&lt;/h2&gt;

&lt;p&gt;So, this idea came to me when I was considering alternatives for a new blog I wanted to start. Up to this point, I used Github pages which hosts for free  any &lt;em&gt;static&lt;/em&gt; website that belonged to an organization, a project or a person.&lt;/p&gt;

&lt;p&gt;For those who are not familiar with web programming, as we read from Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A static web page (sometimes called a flat page or a stationary page) is a web page that is delivered to the user’s web browser exactly as stored, in contrast to dynamic web pages which are generated by a web application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, the website is not supported by a back-end web application, but it’s only a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.css&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; files that the server sends to the browser for the user to view the website. Wordpress sites, for example, &lt;strong&gt;are not&lt;/strong&gt; static, since it’s supported by a &lt;code class=&quot;highlighter-rouge&quot;&gt;PHP&lt;/code&gt; server, a &lt;code class=&quot;highlighter-rouge&quot;&gt;SQL&lt;/code&gt; database and various other components.&lt;/p&gt;

&lt;h2 id=&quot;webserver&quot;&gt;Webserver&lt;/h2&gt;

&lt;p&gt;In our case, to keep things as simple and &lt;strong&gt;as lightweight&lt;/strong&gt; as possible, we will be serving a static website using a static webserver, &lt;strong&gt;Nginx&lt;/strong&gt;. It is one of the oldest and most performant webservers, allowing us to serve up to 1000 users without our Raspberry breaking a sweat.&lt;/p&gt;

&lt;p&gt;Nginx is a very robust web server, allowing the user to perform a myriad of different uses, from serving a static website to performing inverse proxy. Its configuration is very straightforward (as we will see below) and as we will find out soon enough and in essence we will simply dictate the server to serve a set of static files (our website), each time there is a connection at a specific port. (&lt;a href=&quot;https://www.tutorialspoint.com/computer_fundamentals/computer_ports.htm&quot;&gt;What is a computer port&lt;/a&gt;?)&lt;/p&gt;

&lt;h2 id=&quot;blogging-software---jekyll&quot;&gt;Blogging software - Jekyll&lt;/h2&gt;

&lt;p&gt;As we are &lt;em&gt;lazy&lt;/em&gt;, we don’t want to write a blog website from scratch, as it would entail considerable overhead for each new post we want to make. What we want, is a framework that will have a certain &lt;em&gt;theme&lt;/em&gt; and which will generate the static files of the blog &lt;strong&gt;for us&lt;/strong&gt;, allowing us to focus solely on the content of the blog.&lt;/p&gt;

&lt;p&gt;Luckily for us, there is a very easy-to-use framework, called &lt;strong&gt;Jekyll&lt;/strong&gt;. It was created by Github’s co-founder Tom Preston-Werner. As we read from the project’s &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;repository&lt;/a&gt; &lt;strong&gt;README&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. Jekyll is the engine behind &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, which you can use to host sites right from your GitHub repositories.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The power of Jekyll is that it is super easy to use, so easy, that you don’t even need programming knowledge (Verified from personal experience). In essence, you configure a Jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;theme&lt;/code&gt; using a central configuration file and then you write the blog posts in &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; format (More on markdown &lt;a href=&quot;https://www.markdownguide.org/getting-started/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;domain&quot;&gt;Domain&lt;/h2&gt;

&lt;p&gt;Now that we have the core pieces of the website, it is time to think about the &lt;code class=&quot;highlighter-rouge&quot;&gt;domain name&lt;/code&gt; and the &lt;em&gt;potential&lt;/em&gt; issue of &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic IP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If this doesn’t sound familiar, let’s spend a minute for a computer science 101 super-mini-course.&lt;/p&gt;

&lt;h3 id=&quot;whats-an-ip&quot;&gt;What’s an IP&lt;/h3&gt;

&lt;p&gt;Each computer that is connected to a network is identified by a unique address, or &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;, very much like your home address. The Internet is a global network of computers, thus each server has an &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As your home router is connected to the internet, it has it’s own &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; address, which you can find using a service like &lt;a href=&quot;https://whatismyipaddress.com/&quot;&gt;whatsmyipaddress&lt;/a&gt;. At the same time, the router creates a local network in which all your computers at home are connected, thus each computer has a &lt;code class=&quot;highlighter-rouge&quot;&gt;local IP&lt;/code&gt; and all your computers, since they are connected to the Internet &lt;strong&gt;through the router&lt;/strong&gt;, will have the same global &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;, that of the router.&lt;/p&gt;

&lt;h3 id=&quot;but-what-it-has-to-do-with-domains&quot;&gt;But what it has to do with domains?&lt;/h3&gt;

&lt;p&gt;Because it is hard for a person to remember an &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;, there are services that have &lt;strong&gt;Huge&lt;/strong&gt; registries, in which an &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; is tied to a human-understandable &lt;strong&gt;word&lt;/strong&gt;, or &lt;strong&gt;Domain&lt;/strong&gt;. When you pay for a &lt;code class=&quot;highlighter-rouge&quot;&gt;domain name&lt;/code&gt;, you pay to register your &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; to these registries and tie that &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;domain name&lt;/code&gt; that you have bought.&lt;/p&gt;

&lt;p&gt;Now, each time someone enters that domain name, the computer automatically connects to several Domain Name Registries searching for an &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; that is tied to that specific &lt;code class=&quot;highlighter-rouge&quot;&gt;domain name&lt;/code&gt;. When it is found, the browser connects to the server using the &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; and loads the content.&lt;/p&gt;

&lt;p&gt;The problem arises when our IP is not &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; but it changes continuously, in other words, it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-ips-aka-the-plot-thickens&quot;&gt;Dynamic IPs aka “The Plot Thickens”&lt;/h3&gt;

&lt;p&gt;Many ISPs (Internet Service Providers) around the world offer a &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic IP&lt;/code&gt;, meaning that the &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; doesn’t stay the same but changes now and then, according to the policies of each ISP. This creates a challenge, as the domain name will have to point to a new &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; each time our &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; changes.&lt;/p&gt;

&lt;p&gt;Luckily for us, most &lt;code class=&quot;highlighter-rouge&quot;&gt;domain name&lt;/code&gt; providers offer a service called &lt;strong&gt;Dynamic DNS&lt;/strong&gt;. This service allows the customer to use their API to update the &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; to which the &lt;code class=&quot;highlighter-rouge&quot;&gt;domain name&lt;/code&gt; must point to. We will be using a small program called &lt;a href=&quot;https://ddclient.net/&quot;&gt;ddclient&lt;/a&gt; which supports most of the known &lt;code class=&quot;highlighter-rouge&quot;&gt;domain name&lt;/code&gt; providers.&lt;/p&gt;

&lt;h3 id=&quot;wait-a-minute-i-dont-have-a-domain-name&quot;&gt;Wait a minute, I don’t have a domain name&lt;/h3&gt;

&lt;p&gt;If you don’t have a domain, go ahead and grab one from one of the major Domain Name providers (just google &lt;code class=&quot;highlighter-rouge&quot;&gt;buy domain name&lt;/code&gt;). Make sure that the Domain Name provider that you choose supports &lt;code class=&quot;highlighter-rouge&quot;&gt;Dynamic DNS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ddclient&lt;/code&gt;. This &lt;code class=&quot;highlighter-rouge&quot;&gt;guide&lt;/code&gt; was tested using &lt;code class=&quot;highlighter-rouge&quot;&gt;Namecheap&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;balenaio&quot;&gt;balena.io&lt;/h2&gt;

&lt;p&gt;At this point, it is apparent that we will be needing to install and configure a bunch of software not only to bootstrap the website but to also keep it up to date. To do that, we will be using &lt;a href=&quot;https://balena.io&quot;&gt;balena.io&lt;/a&gt; to &lt;em&gt;develop&lt;/em&gt; and &lt;em&gt;deploy&lt;/em&gt; our software to the Raspberry pi with the ease and speed of using a &lt;em&gt;cloud-service&lt;/em&gt; provider.&lt;/p&gt;

&lt;p&gt;That’s right, using balena to &lt;em&gt;provision&lt;/em&gt; and &lt;em&gt;manage&lt;/em&gt; our embedded IoT device, we will be having the same tools and workflows that one would expect from &lt;em&gt;AWS&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;so-whats-the-deal-exactly&quot;&gt;So what’s the deal, exactly?&lt;/h3&gt;

&lt;p&gt;The team behind balena.io were the first people to port docker to the Raspberry family, showcasing how the &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt; visualization paradigm could serve the domain of the Internet of Things.&lt;/p&gt;

&lt;p&gt;Balena now offers a full feature-set that enables us to manage-literally thousands- devices, such as a Raspberry pi, as easily as ever&lt;/p&gt;

&lt;p&gt;We will develop our application as a &lt;code class=&quot;highlighter-rouge&quot;&gt;multi-container&lt;/code&gt; application, meaning that the distinct services from which the project is constructed will run as distinct containers, completely isolated one from another.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can think the &lt;del&gt;docker engine&lt;/del&gt; balena-engine (our optimized for the IoT version of docker) as an &lt;strong&gt;oven&lt;/strong&gt; where you can bake both a &lt;em&gt;fish&lt;/em&gt; and a &lt;em&gt;cake&lt;/em&gt; at the same time, while each will taste and smell just fine when you take them out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the same sense, each service can run independently, without having to worry with incompatible libraries or different versions. &lt;strong&gt;They wil&lt;/strong&gt;l &lt;del&gt;taste&lt;/del&gt; &lt;strong&gt;work just fine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, balena allows us to&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;easily access the device’s logs&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into the host OS or one of the containers&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; a new release by simply running a command.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This last part is pure &lt;strong&gt;black magic&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/AisOYaOZdrS1i/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You simply define your application in a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yaml&lt;/code&gt;, you define a couple of &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfiles&lt;/code&gt; and then you just push your project. &lt;strong&gt;balena&lt;/strong&gt; takes care of building the project specifically for your device on its build-servers and then it simply sends the built project to the device. The smart &lt;code class=&quot;highlighter-rouge&quot;&gt;supervisor&lt;/code&gt; is responsible for downloading and setting up your application according to the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Developing and managing IoT devices have &lt;strong&gt;never&lt;/strong&gt; been so easy and &lt;em&gt;beautiful&lt;/em&gt;. Here is a sneak peek of the dashboard for our device:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Mp9pB7M.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I worked at balena.io in the product team.  Thus, you &lt;em&gt;could&lt;/em&gt; say that I am a bit biased.&lt;/p&gt;

&lt;h2 id=&quot;complimentary-software&quot;&gt;Complimentary Software:&lt;/h2&gt;

&lt;h3 id=&quot;certbot&quot;&gt;Certbot&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Certbot&lt;/code&gt; is a service offered by &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;letsencrypt&lt;/a&gt;, a nonprofit Certificate Authority providing TLS certificates for anyone who may ask. This way, users will be able to connect securely on our website, using &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will be using the certbot-CLI program to request a certificate for our website. In essence, certbot will place a special file for our webserver to serve. When the authority tests the website, it will find the specific file and verify that the website (and thus the domain) is indeed ours. &lt;strong&gt;Giving us a certificate for 90 days&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;netdata&quot;&gt;Netdata&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Netdata&lt;/code&gt; is a monitoring agent that runs on the device, aggregates, visualizes and presents various data about the operation of the machine. From fairly simple, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;RAM&lt;/code&gt; usage, to more complicated such as &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU interrupts&lt;/code&gt;. Moreover, it has collectors for specific apps that can auto-detect if it’s running and start gathering data.&lt;/p&gt;

&lt;p&gt;We will be using Netdata because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s super light (about 5% CPU consumption) and thus ideal for the constraint nature of a Raspberry pi 4.&lt;/li&gt;
  &lt;li&gt;It can auto-detect &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; and start gathering data using the &lt;code class=&quot;highlighter-rouge&quot;&gt;stub_page&lt;/code&gt; of the webserver. You can read more about &lt;code class=&quot;highlighter-rouge&quot;&gt;stub_page&lt;/code&gt; &lt;a href=&quot;https://easyengine.io/tutorials/nginx/status-page/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;We will be using the multi-container functionality of the platform, thus the project will consist of several different containers, each one running a specific component. This architecture enables us to isolate one component from another, facilitating the management and configuration of the application.&lt;/p&gt;

&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;webserver:&lt;/strong&gt; Runs the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; service and the &lt;code class=&quot;highlighter-rouge&quot;&gt;certbot&lt;/code&gt; for SSL generation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ddclient:&lt;/strong&gt; Runs the &lt;code class=&quot;highlighter-rouge&quot;&gt;ddiclient&lt;/code&gt; service&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;netdata monitoring:&lt;/strong&gt; Runs an instance of &lt;a href=&quot;https://github.com/netdata/netdata&quot;&gt;Netdata Monitoring software&lt;/a&gt; to overview the load of the server.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;lets-get-to-it&quot;&gt;Let’s get to it&lt;/h1&gt;

&lt;h2 id=&quot;provisioning-the-device&quot;&gt;Provisioning the Device&lt;/h2&gt;

&lt;p&gt;The first order of business would be to provision our device, a Raspberry pi 4.&lt;/p&gt;

&lt;p&gt;To do that, we need a new account at balena.io and we need to head over to the &lt;a href=&quot;https://www.balena.io/docs/learn/getting-started/raspberrypi4-64/python/&quot;&gt;Get Started Guide&lt;/a&gt; of the balena platform and finish it. It will prompt you to install a &lt;code class=&quot;highlighter-rouge&quot;&gt;demo-app&lt;/code&gt; in your device, but that’s ok. We need you to get familiar with the platform before we continue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; After you finish with the guide, don’t turn off the device, we will need it for later. Just leave it be. Ok? Cool.&lt;/p&gt;

&lt;p&gt;Go ahead, &lt;strong&gt;I’ll wait.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media0.giphy.com/media/pFZTlrO0MV6LoWSDXd/giphy.gif?cid=ecf05e47767a6b2830a15c5a45f4bad24ff65678e446b4d5&amp;amp;rid=giphy.gif&quot; alt=&quot;Waiting..&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;One Note&lt;/strong&gt;: The first 10 devices on balena.io are for &lt;strong&gt;Free&lt;/strong&gt;, so using your new account will be more than enough for this project.&lt;/p&gt;

&lt;p&gt;Before going forward, we assume that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You have balena-CLI installed&lt;/li&gt;
  &lt;li&gt;You have balena-etcher installed&lt;/li&gt;
  &lt;li&gt;You have logged in balena dashboard&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;installing-the-software&quot;&gt;Installing the Software&lt;/h2&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h3&gt;

&lt;p&gt;Although this blog post focuses mainly on setting up a balena-powered raspberry pi webserver, we want to give some insight into how to create a website in the first place.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Visit&lt;/strong&gt; Jekyll’s website and follow the &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;Get started guide&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Get yourself familiar with the Jekyll templating engine&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Search&lt;/strong&gt; for a Jekyll theme that is appealing to you:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;http://jekyllthemes.org/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jekyllthemes.io/&quot;&gt;https://jekyllthemes.io/&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Download&lt;/strong&gt; the theme locally and configure it according to the &lt;strong&gt;theme’s&lt;/strong&gt; and &lt;strong&gt;Jekyll’s documentation&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt; the website according to the &lt;strong&gt;theme’s documentation&lt;/strong&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;source files&lt;/code&gt; will be placed in a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Upload the files inside &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; to a &lt;em&gt;Github Repository&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Disclaimer:&lt;/strong&gt; If you haven’t used Github again:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Follow this &lt;a href=&quot;https://help.github.com/en/enterprise/2.13/user/articles/creating-a-new-repository&quot;&gt;guide&lt;/a&gt; to create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;repository&lt;/code&gt; to Github.&lt;/li&gt;
  &lt;li&gt;Follow this &lt;a href=&quot;https://help.github.com/en/github/managing-files-in-a-repository/adding-a-file-to-a-repository&quot;&gt;guide&lt;/a&gt; to upload all your website’s source files to the &lt;code class=&quot;highlighter-rouge&quot;&gt;repository&lt;/code&gt; you just created.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; You have your very first project on Github!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;installing-the-server-on-the-device&quot;&gt;Installing the server on the device&lt;/h3&gt;

&lt;p&gt;Well, you don’t have to do anything. The software is already shipped ready to be installed directly on the device. Jump to the next section in order to download it locally, change some configuration based on your setup and then ship it!&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-software&quot;&gt;Configuring the Software&lt;/h2&gt;

&lt;h3 id=&quot;environment-variables&quot;&gt;Environment Variables&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Go &lt;a href=&quot;https://github.com/balena-io-playground/balena-nginx&quot;&gt;here&lt;/a&gt; and download the project’s repository locally. If you are not familiar with Github, please refer to their &lt;a href=&quot;https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into the repository using a terminal program (cmd in windows).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the file &lt;code class=&quot;highlighter-rouge&quot;&gt;.balena/balena.yml&lt;/code&gt; using your favorite code editor. If you don’t have one, go ahead and install &lt;a href=&quot;https://code.visualstudio.com/?wt.mc_id=vscom_downloads&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In this file, we need to change a couple of &lt;code class=&quot;highlighter-rouge&quot;&gt;environment variables&lt;/code&gt; which we make available to the services via their respective &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfiles&lt;/code&gt;. Go ahead and change the variables:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;In order to find the &lt;code class=&quot;highlighter-rouge&quot;&gt;REPO_ZIP_URL&lt;/code&gt;, go to your Github repository, &lt;em&gt;click&lt;/em&gt; on &lt;strong&gt;clone or download&lt;/strong&gt; and then &lt;em&gt;right-click&lt;/em&gt; on &lt;strong&gt;Download ZIP&lt;/strong&gt; and &lt;em&gt;click&lt;/em&gt; on &lt;strong&gt;Copy Link Address&lt;/strong&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Fill in the domain of your website according to this certbot example. Please note that &lt;code class=&quot;highlighter-rouge&quot;&gt;www.domain.com&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;domain.com&lt;/code&gt; are two different domains, it is best to include both.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;REPO_ZIP_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://github.com/OdysLam/odyslam.github.io/archive/master.zip
&lt;span class=&quot;nv&quot;&gt;REPO_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;odyslam.github.io
&lt;span class=&quot;nv&quot;&gt;CERTBOT_MAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hi@odyslam.me
&lt;span class=&quot;nv&quot;&gt;CERTBOT_DOMAIN_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;www.example.com
&lt;span class=&quot;nv&quot;&gt;CERTBOT_DOMAIN_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This environment variables are not expected to change while the server runs, thus we prefer to define them at build time.&lt;/p&gt;

&lt;p&gt;On the other hand, there are 2 environment variables that can be set using &lt;code class=&quot;highlighter-rouge&quot;&gt;balena dashboard&lt;/code&gt; and when the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; container reloads, it will pick them up.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SYNC_WEBSITE:&lt;/strong&gt; If this environment variable is set to “1”, the container will always download the latest version of the website every time it restarts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CERTBOT_FORCED:&lt;/strong&gt; If this environment variable is set to “1”, the container will always request a new certification every time it restarts. If the current certification is still valid, it will simply inform the user that the certification is up-to-date and will exit.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;You can read more about &lt;code class=&quot;highlighter-rouge&quot;&gt;environment variables&lt;/code&gt; in balena, in the &lt;a href=&quot;https://www.balena.io/docs/learn/manage/serv-vars/&quot;&gt;documentation&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;You can read more about &lt;code class=&quot;highlighter-rouge&quot;&gt;build-time secrets&lt;/code&gt; in balena, in the &lt;a href=&quot;https://www.balena.io/docs/learn/more/masterclasses/cli-masterclass/#81-build-time-secrets&quot;&gt;documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nginx-configuration&quot;&gt;nginx configuration&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run the commands bellow to generate a private key that will be used by nginx for &lt;em&gt;SSL&lt;/em&gt; related functionality. As it might take some minutes, go ahead and read some information about it in this &lt;a href=&quot;https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters&quot;&gt;Stack Overflow Question&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;nginx
openssl dhparam &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; dhparam.pem 2048
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Using a text editor, open &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt; which will find the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; directory. Head over to the following excerpt and replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;www.example.com&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt; with your domain name.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;443&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http2&lt;/span&gt;;
&lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
listen 80;
listen [::]:80;
server_name www.example.com example.com;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to read more about the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; configuration file and what the various fields mean, you can read more about it here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Digital ocean &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/understanding-the-nginx-configuration-file-structure-and-configuration-contexts&quot;&gt;article&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx &lt;a href=&quot;http://nginx.org/en/docs/beginners_guide.html&quot;&gt;Beginner’s Guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ddiclient-configuration&quot;&gt;ddiclient configuration&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a configuration file for &lt;code class=&quot;highlighter-rouge&quot;&gt;ddclient&lt;/code&gt; using a text editor:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;You can find examples in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ddclient&lt;/code&gt;’s &lt;a href=&quot;https://ddclient.net/#configuration&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;If you used Namecheap, you can find an example configuration in the &lt;a href=&quot;https://www.namecheap.com/support/knowledgebase/article.aspx/583/11/how-do-i-configure-ddclient&quot;&gt;namecheap documentation&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Place the configuration file you just created into the &lt;code class=&quot;highlighter-rouge&quot;&gt;ddclient&lt;/code&gt; folder&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;configuring-the-local-network&quot;&gt;Configuring the local network&lt;/h2&gt;

&lt;p&gt;In order for this project to succeed we need to do 2 things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set the raspberry pi to have a static ip in the local network. This will ensure that the router will always know what’s the correct IP for the server.&lt;/li&gt;
  &lt;li&gt;Set the router to allow connections from the Internet that are intended for the server. In other words, allow users to access our web-page!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;static-ip&quot;&gt;Static IP&lt;/h3&gt;

&lt;p&gt;Balena allows us to set our device to static IP in a breeze.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Find out the &lt;code class=&quot;highlighter-rouge&quot;&gt;IP form&lt;/code&gt; that the router uses to assign &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;s.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Go to your balenaCloud dashboard, you can find the IP of your device at the summary page.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/BgMJUfv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a text editor to open the file &lt;code class=&quot;highlighter-rouge&quot;&gt;static-ip&lt;/code&gt; that you will find in the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;tools&lt;/code&gt; of the repository you downloaded.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replace the field &lt;code class=&quot;highlighter-rouge&quot;&gt;ROUTER_IP&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; of the router.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replace the field &lt;code class=&quot;highlighter-rouge&quot;&gt;DEVICE_IP&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; of your balena device with a small change. Change the digits after the last &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Close the text editor.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example, note that here the &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; has the format &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.X&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[connection]
id=my-ethernet
type=ethernet
interface-name=eth0
permissions=
secondaries=

[ethernet]
mac-address-blacklist=

[ipv4]
#This is the important line
address1=192.168.1.100/24,192.168.1.1 
dns=8.8.8.8;8.8.4.4;
dns-search=
method=manual

[ipv6]
addr-gen-mode=stable-privacy
dns-search=
method=auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;port-forwarding&quot;&gt;Port Forwarding&lt;/h3&gt;

&lt;p&gt;When someone attempts to connect to the &lt;strong&gt;IP&lt;/strong&gt; that is assigned to your home connection, in essence he/she connects to the &lt;em&gt;router&lt;/em&gt;, as it functions as the gateway between the outer network (the Internet) and the local network (LAN). Thus we want to tell the &lt;em&gt;router&lt;/em&gt; that any time someone tries to continue to some specific port, in reality, he/she wants to connect to our server, thus the router must forward the connection to the Raspberry pi (the web server).&lt;/p&gt;

&lt;p&gt;In other words, we need to forward &lt;strong&gt;ports&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;443&lt;/code&gt; to the Raspberry pi.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Visit&lt;/strong&gt; &lt;a href=&quot;https://portforward.com/&quot;&gt;portforward&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Find your router&lt;/li&gt;
  &lt;li&gt;Follow instructions and forward the ports to the device’s IP&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;deploy&quot;&gt;Deploy&lt;/h2&gt;

&lt;p&gt;Now that we have everything configured, let’s start deploying the various components.&lt;/p&gt;

&lt;h3 id=&quot;deploy-the-project-to-the-device&quot;&gt;Deploy the project to the device&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Open balenaCloud and create a new application for &lt;code class=&quot;highlighter-rouge&quot;&gt;Raspberry pi 4&lt;/code&gt;. You can name it whatever you want. We will assume that you name it &lt;code class=&quot;highlighter-rouge&quot;&gt;bananas&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Download an &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt; image for that application. Don’t bother filling in your &lt;code class=&quot;highlighter-rouge&quot;&gt;wifi&lt;/code&gt; credentials, we will be using &lt;code class=&quot;highlighter-rouge&quot;&gt;ethernet&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;wifi&lt;/code&gt; is not very reliable for a webserver.
 &lt;img src=&quot;https://media.giphy.com/media/5hc2bkC60heU/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Burn the image using the best image format app in the world, &lt;strong&gt;balena-etcher&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Pull out the sd card and re-insert it in the computer. Copy the file named &lt;code class=&quot;highlighter-rouge&quot;&gt;static-ip&lt;/code&gt; we created earlier into the &lt;code class=&quot;highlighter-rouge&quot;&gt;system-connections&lt;/code&gt; directory of the sd card.&lt;/li&gt;
  &lt;li&gt;Insert the card into the Raspberry pi and connect it to power.&lt;/li&gt;
  &lt;li&gt;Go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;balena-nginx&lt;/code&gt; directory, where your &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yaml&lt;/code&gt; is located, and push the project&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;balena push bananas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generating-the-ssl-certificate&quot;&gt;Generating the SSL certificate&lt;/h3&gt;

&lt;p&gt;To generate the SSL certificate, we don’t have to do anything.&lt;/p&gt;

&lt;p&gt;The server will detect the absence of the certificates and will run the &lt;code class=&quot;highlighter-rouge&quot;&gt;certbot&lt;/code&gt; service to register your website. Afterward, it will simply start the server and will serve your website.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;certificates&lt;/code&gt; will be saved into a persistent directory with a functionality called &lt;code class=&quot;highlighter-rouge&quot;&gt;named volumes&lt;/code&gt;. This enables the device to persist your certificates (or any data in that directory)&lt;/p&gt;

&lt;h3 id=&quot;updating-your-certificates&quot;&gt;Updating your certificates&lt;/h3&gt;

&lt;p&gt;You are very organized and want to plan ahead? No problem, certbot will automatically send you an e-mail when the certifications are about to expire.&lt;/p&gt;

&lt;p&gt;When you receive that e-mail, you only need to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Log in&lt;/strong&gt; to balena dashboard&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Go to&lt;/strong&gt; device summary&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Open ssh session&lt;/strong&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; container&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;certbot renew&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Done&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;push-new-content-to-the-website&quot;&gt;Push new content to the website&lt;/h3&gt;

&lt;p&gt;All we have to do in order to push new content to the website is to update the &lt;code class=&quot;highlighter-rouge&quot;&gt;source files&lt;/code&gt; in the directory from which we have configured &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; to serve our website. In our case  &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/nginx/html/&lt;/code&gt;.ping&lt;/p&gt;

&lt;p&gt;To do that, we have a script inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; container, which downloads the latest version of our website from the &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt; repository we have defined.&lt;/p&gt;

&lt;p&gt;To run the script:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SSH into &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; container, preferably using &lt;code class=&quot;highlighter-rouge&quot;&gt;balena dashboard&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; /update-blog.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But, what happens if we want to add new content to our website?&lt;/p&gt;

&lt;p&gt;We have to upload the new source files into our &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub Repository&lt;/code&gt; and then we have to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;update-blog.sh&lt;/code&gt; script in order to download the new version in the server.&lt;/p&gt;

&lt;p&gt;So, in order to push new content to the website:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change the website’s source files&lt;/li&gt;
  &lt;li&gt;Upload the new files to the Repository and add a &lt;code class=&quot;highlighter-rouge&quot;&gt;commit message&lt;/code&gt; to describe the changes&lt;/li&gt;
  &lt;li&gt;From &lt;code class=&quot;highlighter-rouge&quot;&gt;balena dashboard&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; container and run: &lt;code class=&quot;highlighter-rouge&quot;&gt;/update-blog.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;push-new-content-to-the-website---for-advanced-users&quot;&gt;Push new content to the website - For advanced users&lt;/h3&gt;

&lt;p&gt;The whole &lt;em&gt;process&lt;/em&gt; has been &lt;strong&gt;automated&lt;/strong&gt;, and you can simply run the script &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy-dev-loca.sh&lt;/code&gt; from the local directory of the project, like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./deploy-dev-local.sh &quot;&amp;lt;commit message&amp;gt;&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The field &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;commit message&amp;gt;&lt;/code&gt; must be replaced with a commit message for the addition to the &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt; repository, just like you did when you uploaded the files using the website of &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This script does the following things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Builds the Jekyll website and outputs it to a pre-determined directory&lt;/li&gt;
  &lt;li&gt;Commits the changed source files to the website’s local repository&lt;/li&gt;
  &lt;li&gt;Pushes the new local repository to the remote website’s repository at Github&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SSH&lt;/code&gt; into the hostOS of the device, assuming it runs a development image, and then it &lt;code class=&quot;highlighter-rouge&quot;&gt;SSH&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; container&lt;/li&gt;
  &lt;li&gt;Runs the &lt;code class=&quot;highlighter-rouge&quot;&gt;update-blog.sh&lt;/code&gt; script, which in turns:
    &lt;ol&gt;
      &lt;li&gt;Downloads the website’s source files from the remote Github repository (the one we just uploaded to)&lt;/li&gt;
      &lt;li&gt;Replaces the old website with the new source files&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, Nginx serves the new website&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before you can you can use the script, you have to open the file using your favorite text editor and replace the following fields:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# export J_OUTPUT= Absolute path to the directory of the website's source files&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# export REPO = Absolute path to the directory of the website's source files&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# export DEV_UUID= UUID of the device, can be found from the device's dashboard&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;finally-a-use-case&quot;&gt;Finally, a use-case&lt;/h3&gt;

&lt;p&gt;In case you want to see how this setup works, here is my setup divided into 3 repositories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;balena-nginx&lt;/code&gt;: The source files for the setup of the webserver.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/balena-io-playground/balena-nginx&quot;&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clyell&lt;/code&gt;: Fork from a Jekyll theme which I have modified extensively. This repository has all the files that are used by  &lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; engine to create the source files of my blog.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/OdysLam/clyell&quot;&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;odyslam.github.io&lt;/code&gt;: Repository which holds the source files of my entire website. This is the repository that is downloaded to the webserver. It consists of the main website which is a plain &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CSS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JS&lt;/code&gt; website built by hand and the &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog&lt;/code&gt; directory which is built by Jekyll from the files of the &lt;code class=&quot;highlighter-rouge&quot;&gt;clyell&lt;/code&gt; repository.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/OdysLam/odyslam.github.io&quot;&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 22 Apr 2020 00:00:00 +0300</pubDate>
        <link>https://odyslam.me/blog/balena-nginx-rpi/</link>
        <guid isPermaLink="true">https://odyslam.me/blog/balena-nginx-rpi/</guid>
        
        <category>2020</category>
        
        <category>tutorial</category>
        
        <category>balena</category>
        
        <category>technology</category>
        
        <category>nginx</category>
        
        
      </item>
    
      <item>
        <title>Netdata tutorial for Production Web Server (Nginx, PHP-fpm, MariaDB)</title>
        <description>&lt;p&gt;Created: Dec 05, 2019 | Updated: Jan 12, 2020 | Document Version: 0.3
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;why&quot;&gt;Why&lt;/h1&gt;

&lt;p&gt;A while back I discovered &lt;a href=&quot;https://netdata.cloud&quot;&gt;Netdata&lt;/a&gt; and I was truly fascinated by it’s take on system monitoring for two main reasons. It was extremely lightweight, something of great usefulness to me, an IoT enthusiast, as it proved to be a  very useful tool to debug IoT devices, such as the Raspberry pi.&lt;/p&gt;

&lt;p&gt;On a Raspberry pi zero W, it consumes as little as 10% of the cpu, without any optimization whatsoever and update frequency of 1 second. &lt;strong&gt;Crazy huh?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another aspect that I enjoyed as a newcomer to the world of &lt;em&gt;Devops&lt;/em&gt; was the intrinsic easiness of both the installation and customization of the platform. It’s truly a &lt;em&gt;fire and forget&lt;/em&gt; application that is configured and programmed in such as way that the default settings will be adequate for a large number of users, myself included.&lt;/p&gt;

&lt;p&gt;This fascination and the fact that I had just finished my Integrated Master’s diploma ,(thus looking to break into the startup world), led me to contribute a bit of docs and code, as a good open source citizen.&lt;/p&gt;

&lt;p&gt;Wanting to dig further, I was extremely fortunate to be introduced to a sys-admin at the University of Patras, named Spiros. Spiros and I, installed and configured Netdata on a production server for the University of Patras. This post is an attempt to distill what we learned.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post describes how to install and configure Netdata for a production server for a typical PHP webserver (Nginx, php, MariaDB).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It was originally written back in January, but it is published now for the first time.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This post is intended for the purpose of onboarding a production web-server to the Netdata platform, introducing a new era to metrics and performance monitoring. Netdata is built around 4 main principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Per second&lt;/strong&gt; data collection for all metrics.&lt;/li&gt;
  &lt;li&gt;Collection &amp;amp; Visualization of metrics from &lt;strong&gt;all possible&lt;/strong&gt; sources&lt;/li&gt;
  &lt;li&gt;Meaningful presentation of metrics, optimised for visual anomaly detection&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pre-configured&lt;/strong&gt;, fire (install) and forget!&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Netdata decentralizes monitoring completely. Each Netdata node is autonomous. It collects metrics locally, it stores them locally, it runs checks against them to trigger alarms locally, and provides an API for the dashboards to visualize them. &lt;strong&gt;Horizontal Scale&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;so-what-netdata-does&quot;&gt;So what Netdata does?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Metrics are auto-detected, so for 99% of the cases data collection works out of the box.&lt;/li&gt;
  &lt;li&gt;Metrics are converted to human readable units, right after data collection, before storing them into the database.&lt;/li&gt;
  &lt;li&gt;Metrics are structured, organized in charts, families and applications, so that they can be browsed.&lt;/li&gt;
  &lt;li&gt;Dashboards are automatically generated, so all metrics are available for exploration immediately after installation.&lt;/li&gt;
  &lt;li&gt;Dashboards are not just visualizing metrics; they are a tool, optimized for visual anomaly detection.&lt;/li&gt;
  &lt;li&gt;Hundreds of pre-configured alarm templates are automatically attached to collected metrics.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hcoIwoB.png&quot; alt=&quot;Netdata%20guide%20for%20Production%20Web%20Server%20Nginx%20PHP%20/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-netdata-collectors-work&quot;&gt;How netdata collectors work:&lt;/h3&gt;

&lt;p&gt;Netdata uses internal and external plugins to collect data. Internal plugins run within the Netdata daemon, while external plugins are independent processes that send metrics to Netdata over pipes. There are also plugin orchestrators, which are external plugins with one or more data collection modules.&lt;/p&gt;

&lt;h2 id=&quot;requirements-for-the-use-case&quot;&gt;Requirements for the use-case&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;History:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Period: 1 year&lt;/li&gt;
      &lt;li&gt;Granularity: (average)5min&lt;/li&gt;
      &lt;li&gt;Data points: cpu, net traffic, ram (systemwide, per application)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;System:&lt;/strong&gt; Ubuntu 18.04.3 LTS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VM:&lt;/strong&gt; Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Applications:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Ngingx&lt;/li&gt;
      &lt;li&gt;phpfm&lt;/li&gt;
      &lt;li&gt;drupal&lt;/li&gt;
      &lt;li&gt;mariaDB (mysql, innodb style)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Alarms:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Critical: downtime (uptime monitor)&lt;/li&gt;
      &lt;li&gt;Normal: uptime monitor, unusual senarios (e.g 70% cpu. 99% i/o filesystem)&lt;/li&gt;
      &lt;li&gt;Medium: email&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Setup:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Local registry&lt;/li&gt;
      &lt;li&gt;2 linux VMs webserver, one for upatras.gr, one for various minor sites&lt;/li&gt;
      &lt;li&gt;situated in the same secure network, no need for vpn or authentication&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;p&gt;In this section we go through the installation of the netdata platform and all the required libaries, packages and third party programs that will enable the monitoring according to the requirements.&lt;/p&gt;

&lt;p&gt;This installation will be replicated to both the machines that will host a web-server, one will work as a slave that will forward metrics to the main machine where all the processing and storage will be conducted. It is explained in the &lt;strong&gt;Streaming section.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;netdata&quot;&gt;Netdata&lt;/h2&gt;

&lt;p&gt;There are multiple ways to install netdata, but the user is advised to use the one-line script that is provided by netdata. According to the requirements, this is the optimal route.&lt;/p&gt;

&lt;p&gt;With the one-liner below, you install netdata and all the dependencies. You also agree that Netdata will aggregate anonymous statistics (such as OS version) that is necessary for rapid product development and discovery (prioritize OS binaries, decide features etc.)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-Ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://my-netdata.io/kickstart.sh]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://my-netdata.io/kickstart.sh&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-updates&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--stable-channel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;comments:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;no-updates: Prevent automatic updates of any kind.&lt;/p&gt;

&lt;p&gt;stable-channel: Automatically update only on the release of new major versions (thus install latest stable release)&lt;/p&gt;

&lt;p&gt;To inspect the installation url, the use can download it from &lt;a href=&quot;https://my-netdata.io/kickstart.sh&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that Netdata is (hopefully) installed, please head over to &lt;a href=&quot;http://localhost:19999&quot;&gt;http://localhost:19999&lt;/a&gt; to verify correct installation.&lt;/p&gt;

&lt;h2 id=&quot;firewall-issues&quot;&gt;Firewall issues&lt;/h2&gt;

&lt;p&gt;If you can’t connect, it’s possible that you have a firewall installed and that you have to open the port &lt;code class=&quot;highlighter-rouge&quot;&gt;19999&lt;/code&gt;.  Below you can find relevant information and commands for Ubuntu &amp;amp; CentOS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow 19999/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;CentOS:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-port&lt;/span&gt; 19999/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Don’t forget to enable the netdata service using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo systemctl enable netdata&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All Installation methods:&lt;/strong&gt; &lt;a href=&quot;https://docs.netdata.cloud/packaging/installer/&quot;&gt;https://docs.netdata.cloud/packaging/installer/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation-using-package-manager&quot;&gt;Installation using Package Manager&lt;/h2&gt;

&lt;p&gt;In a production environment, it is a good practice to use the Package Manager to install Netdata. Please do so by using the Package Manager of the distribution.&lt;/p&gt;

&lt;p&gt;Before Installing Netdata from the Package Manager, we need to add the Netdata Repository from &lt;a href=&quot;https://packagecloud.io/netdata/netdata&quot;&gt;PackageCloud&lt;/a&gt; into the &lt;em&gt;system package sources&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Run the following code to add the Repository into your &lt;em&gt;system’s package sources&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://packagecloud.io/install/repositories/netdata/netdata/script.deb.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can install netdata (e.g using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install&lt;/code&gt; in Ubuntu):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;upgrade
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;netdata
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;nginx-proxy---security-alert&quot;&gt;Nginx Proxy - Security Alert&lt;/h2&gt;

&lt;p&gt;For increased security, it is advised that you configure Netdata to be only accessible from &lt;a href=&quot;http://localhost&quot;&gt;localhost&lt;/a&gt; and &lt;em&gt;proxy&lt;/em&gt; the connection through an NginX Reverse Proxy server. Please follow the &lt;a href=&quot;Python3&quot;&gt;guide&lt;/a&gt; to set up the reverse proxy.&lt;/p&gt;

&lt;h2 id=&quot;necessary-libraries&quot;&gt;Necessary Libraries&lt;/h2&gt;

&lt;p&gt;As per the uproduction web-server scenario requirements, we need to install some external libraries in order for the plugins that enable the data collection (collectors) can be used by netdata.&lt;/p&gt;

&lt;p&gt;Although netdata supports plugins from 4 different ecosystems (Bash, Python, NodeJS, Golang), we will be using &lt;strong&gt;Python Plugins&lt;/strong&gt; as they cover our needs and are the most battle-tested.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;News Bullet:&lt;/strong&gt;  Netdata is gradually implementing all the python add-ons to Golang, as Golang offers better performance (&lt;strong&gt;which is critical to minimise netdata’s footprint&lt;/strong&gt;). Although Python plugins will still function as expected, after the transition, new versions of the plugins (e.g with more metrics) will likely  appear as Go plugins.&lt;/p&gt;

&lt;h3 id=&quot;updateinstall-either-python-27-or-python-31&quot;&gt;Update/Install either Python 2.7+ or Python 3.1+&lt;/h3&gt;

&lt;p&gt;To test currently installed python version:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#python 2&lt;/span&gt;
python &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#python 3 &lt;/span&gt;
python3 &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;important-note-on-python-version&quot;&gt;Important Note on Python Version&lt;/h1&gt;

&lt;p&gt;Currently, Netdata uses the system’s default python version. Thus, for &lt;strong&gt;most systems (e.g Ubuntu), Netdata will use Python2.7.&lt;/strong&gt; If python2.7 is the default one for your system, please install all the libraries for Python2.7.&lt;/p&gt;

&lt;p&gt;All systems have a certain Python version already pre-installed. It is advised to use that one for the rest of the tutorial and not install a new one.&lt;/p&gt;

&lt;h3 id=&quot;install-pip-python-package-manager&quot;&gt;Install PiP (Python Package Manager)&lt;/h3&gt;

&lt;p&gt;Before proceeding, we will install PIP, a &lt;strong&gt;necessary&lt;/strong&gt; Package Manager for all Python libraries.&lt;/p&gt;

&lt;p&gt;Depending on the python version that we will be using, install PIP using the Package Manager of the distribution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python2:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-pip
pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; pip &lt;span class=&quot;c&quot;&gt;#update pip to latest version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python3:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python3-pip
pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; pip &lt;span class=&quot;c&quot;&gt;#update pip to latest version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;install-collector-libraries&quot;&gt;Install Collector Libraries:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MariaDB(Mysql):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To monitor the MariaDB server, we will be needing the &lt;em&gt;python library&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;python-mysqldb&lt;/code&gt;. Please follow the instructions bellow to install the package &lt;strong&gt;system-wide.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is worth mentioning that depending on your setup, it is possible that you will be needing to use &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pip&lt;/code&gt;. In that case, please use the -H flag as follows: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -H&lt;/code&gt;. It is needed to force pip to install the package to the system’s home directory, thus making the package available system-wide.&lt;/p&gt;

&lt;h4 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h4&gt;

&lt;p&gt;Depending on whether you use Python2 or Python3, the installation of the required packages and libraries is different. The packages are required so that the Python Library that interfaces with MariaDB can function properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;default-libmysqlclient-dev
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-dev 
pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mysqlclient 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;default-libmysqlclient-dev
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python3-dev 
pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mysqlclient
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;centos&quot;&gt;CentOS&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Python3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mariadb-devel
pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mysqlclient
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mariadb-devel
pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mysqlclient 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Github page:&lt;/strong&gt; &lt;a href=&quot;https://github.com/PyMySQL/mysqlclient-python&quot;&gt;https://github.com/PyMySQL/mysqlclient-python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docs:&lt;/strong&gt; &lt;a href=&quot;https://mysqlclient.readthedocs.io/&quot;&gt;https://mysqlclient.readthedocs.io/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;netdata-configuration&quot;&gt;Netdata Configuration&lt;/h1&gt;

&lt;p&gt;Now that everything is installed, you can restart netdata by running &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo systemctl restart netdata&lt;/code&gt;and head over to the dashboard &lt;code class=&quot;highlighter-rouge&quot;&gt;http:&amp;lt;netdata_host_ip&amp;gt;:19999&lt;/code&gt;. Netdata automatically detects data sources and enable plugins.&lt;/p&gt;

&lt;h2 id=&quot;general-configuration&quot;&gt;General Configuration&lt;/h2&gt;

&lt;p&gt;The configuration of the netdata agent is conducted through a helper script which is found at:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/netdata/edit-config&lt;/code&gt;. It is possible that &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; is needed to use the script as the script fetches the default configuration, opens it for the user to edit and then saves it in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/netdata&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The main configuration file is named: &lt;strong&gt;netdata.conf&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;netdata.conf&lt;/code&gt; file is broken up into various sections, such as [global], [web], [registry], and more. By default, most options are commented, so you’ll have to uncomment them (remove the #) and restart netdata for Netdata to recognise your change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We will be leaving the configuration at default for an initial testing period&lt;/strong&gt;, before we proceed to any modifications to address specific needs. Bellow, the user can find all relevant documentation for easy access.&lt;/p&gt;

&lt;p&gt;One metrics we do need to change, is the storage capacity of the &lt;strong&gt;dbengine,&lt;/strong&gt; which is the default saving mechanism and our choice as per the requirements.&lt;/p&gt;

&lt;p&gt;Note that there are &lt;strong&gt;several options&lt;/strong&gt; regarding the &lt;strong&gt;mechanism&lt;/strong&gt; with which netdata will &lt;strong&gt;save data,&lt;/strong&gt; including the dbengine and a Round-Robin in-memory only database. For more information: https://docs.netdata.cloud/database&lt;/p&gt;

&lt;h2 id=&quot;collectors-data-collection&quot;&gt;Collectors (Data Collection)&lt;/h2&gt;

&lt;p&gt;Netdata supports &lt;strong&gt;internal&lt;/strong&gt; and &lt;strong&gt;external&lt;/strong&gt; data collection plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;internal&lt;/strong&gt; plugins are written in &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; and run as threads inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;netdata&lt;/code&gt; daemon.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;external&lt;/strong&gt; plugins may be written in any computer language and are spawn as independent long-running processes by the &lt;code class=&quot;highlighter-rouge&quot;&gt;netdata&lt;/code&gt; daemon. They communicate with the &lt;code class=&quot;highlighter-rouge&quot;&gt;netdata&lt;/code&gt; daemon via &lt;code class=&quot;highlighter-rouge&quot;&gt;pipes&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; communication).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To minimize the number of processes spawn for data collection, Netdata also supports &lt;strong&gt;plugin orchestrators&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;plugin orchestrators&lt;/strong&gt; are external plugins that do not collect any data by themeselves. Instead they support data collection &lt;strong&gt;modules&lt;/strong&gt; written in the language of the orchestrator. Usually the orchestrator provides a higher level abstraction, making it ideal for writing new data collection modules with the minimum of code.&lt;/p&gt;

    &lt;p&gt;Currently Netdata provides plugin orchestrators BASH v4+ &lt;a href=&quot;https://docs.netdata.cloud/collectors/charts.d.plugin/&quot;&gt;charts.d.plugin&lt;/a&gt;, node.js &lt;a href=&quot;https://docs.netdata.cloud/collectors/node.d.plugin/&quot;&gt;node.d.plugin&lt;/a&gt; and python v2+ (including v3) &lt;a href=&quot;https://docs.netdata.cloud/collectors/python.d.plugin/&quot;&gt;python.d.plugin&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be using the Python plugin orchestrator, each of the collectors states below is in essence a module of the Python.d plugin.&lt;/p&gt;

&lt;h3 id=&quot;general-information&quot;&gt;General Information&lt;/h3&gt;

&lt;p&gt;When Netdata starts, it auto-detects dozens of data sources, such as database servers, web servers, and more. To auto-detect and collect metrics from a service or application you just installed, you need to restart Netdata.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download and install all the software that you want to monitor (in our case: nginx, PHP-fmp, MariaDB) prior to the netdata installation, to leverage automatic discovery)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can configure both internal and external plugins, along with the individual modules.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;netdata.conf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[plugins]&lt;/code&gt; section: Enable or disable internal or external plugins with &lt;code class=&quot;highlighter-rouge&quot;&gt;yes&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;no&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;netdata.conf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[plugin:XXX]&lt;/code&gt; sections: Each plugin has a section for changing collection frequency or passing options to the plugin.&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;.conf&lt;/code&gt; files for each external plugin: Enable/Disable specific modules or set plugin specific configurations. For example, at &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/netdata/python.d.conf&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;.conf&lt;/code&gt; files for each module. Set module specific configurations, such as the metrics endpoint. : For example, at &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/netdata/python.d/nginx.conf&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be leaving the configurations at default for the testing period. In case you have installed an application with non-standard settings (e.g different socket location) please do make the proper change in the appropriate &lt;code class=&quot;highlighter-rouge&quot;&gt;.conf&lt;/code&gt; file. Otherwise, no configuration is needed (unless explicitly stated in this guide).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Example&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/netdata/edit-config python.d/nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;chosen-collectors&quot;&gt;Chosen Collectors:&lt;/h3&gt;

&lt;p&gt;As per the requirements of production web-server, the following plugins were chosen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;web_log:&lt;/strong&gt; Parses the log files of known servers (e.g nginx) and detects irregularities&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mysql:&lt;/strong&gt; connects to a mysql database and fetches various metrics&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;php-FPM:&lt;/strong&gt; Uses the /metrics endpoint of a PHP-FPM powered server and fetches metrics&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nginx:&lt;/strong&gt; Uses the metrics endpoint( socket, HTTP endpoint) and fetches metrics&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notes-on-editing-the-configuration-files&quot;&gt;Notes on editing the configuration files:&lt;/h3&gt;

&lt;p&gt;Python plugins use YAML files to be configured, and one of the most important common configurable variable, is the resource address that each plugin will reach to gather statistics.&lt;/p&gt;

&lt;p&gt;To facilitate configuration, most Netdata plugins have already pre-configured a number of possible endpoints for each plugin. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; searches on multiple directories for the right  &lt;code class=&quot;highlighter-rouge&quot;&gt;Unix socket&lt;/code&gt; It does so by defining different &lt;code class=&quot;highlighter-rouge&quot;&gt;jobs&lt;/code&gt;, each &lt;code class=&quot;highlighter-rouge&quot;&gt;job&lt;/code&gt; for one endpoint .&lt;/p&gt;

&lt;p&gt;Note that if two or more jobs have the same &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;, only one will run. Meaning that &lt;strong&gt;the plugin will use the endpoint for which it’s job was the first one to succeed in retrieving information.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thus, when configuring the plugins, &lt;strong&gt;you can edit only one job to point it to the right direction&lt;/strong&gt; (for example, if you have changed the default directory for the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx_status_page&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is also advised to change the name of &lt;em&gt;all&lt;/em&gt; the jobs to the desired name (that will be used by the dashboard) so that you don’t have to find out specifically which job is the one that is activated by the plugin.&lt;/p&gt;

&lt;p&gt;📍  &lt;strong&gt;web_log&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Parses the log file of various web servers (nginx, apache, gunicord, etc.) to detect the following scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;too many redirects&lt;/li&gt;
  &lt;li&gt;too many bad requests&lt;/li&gt;
  &lt;li&gt;too many internal server errors&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;unreasonably too many requests&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;unreasonably few requests&lt;/li&gt;
  &lt;li&gt;unreasonably slow responses&lt;/li&gt;
  &lt;li&gt;too few successful responses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🔧 Edit the configuration file to point the collector to the correct &lt;strong&gt;weblog metrics endpoint (&lt;/strong&gt; the logs of your web server e.g apache, nginx, etc. )&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/netdata/edit-config python.d/web_log.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Make sure that web_server logs and the relevant directory is accessible by the user &lt;code class=&quot;highlighter-rouge&quot;&gt;netdata&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;📃 &lt;em&gt;docs page:&lt;/em&gt; &lt;a href=&quot;https://docs.netdata.cloud/collectors/python.d.plugin/web_log/&quot;&gt;https://docs.netdata.cloud/collectors/python.d.plugin/web_log/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📍  &lt;strong&gt;mysql&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It monitors one or many mysql servers. To function as intended it requires a python library (as mentioned above) and a &lt;strong&gt;netdata user&lt;/strong&gt; to access the database and gather metrics.&lt;/p&gt;

&lt;p&gt;To create the &lt;code class=&quot;highlighter-rouge&quot;&gt;netdata&lt;/code&gt; user, execute the following in the MySQL shell:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'netdata'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;usage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'netdata'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;🔧 Edit the configuration file to point the collector to the correct &lt;strong&gt;mysql metrics endpoint.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;📍Please note that the default settings probably already cover your use-case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/netdata/edit-config python.d/mysql.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;📃 &lt;em&gt;docs page:&lt;/em&gt; &lt;a href=&quot;https://docs.netdata.cloud/collectors/python.d.plugin/mysql/&quot;&gt;https://docs.netdata.cloud/collectors/python.d.plugin/mysql/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📍  &lt;strong&gt;PHP-FPM:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This module will monitor one or more php-fpm instances depending on configuration.&lt;/p&gt;

&lt;p&gt;🔧 Edit the configuration file to point the collector to the correct &lt;strong&gt;PHP-FPM metrics endpoint.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/netdata/edit-config python.d/phpfpm.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;📃&lt;em&gt;docs page:&lt;/em&gt; &lt;a href=&quot;https://docs.netdata.cloud/collectors/python.d.plugin/phpfpm/&quot;&gt;https://docs.netdata.cloud/collectors/python.d.plugin/phpfpm/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📍 &lt;strong&gt;nginx:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This module will monitor one or more nginx servers depending on configuration. Servers can be either local or remote.&lt;/p&gt;

&lt;p&gt;🔧 Edit the configuration file to point the collector to the correct &lt;strong&gt;nginx metrics endpoint.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/netdata/edit-config python.d/nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;📃&lt;em&gt;docs page:&lt;/em&gt; &lt;a href=&quot;https://docs.netdata.cloud/collectors/python.d.plugin/nginx/&quot;&gt;https://docs.netdata.cloud/collectors/python.d.plugin/nginx/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;httpcheck:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Module monitors remote http server for availability and response time.&lt;/p&gt;

&lt;p&gt;The user must edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;.conf&lt;/code&gt; file to point it to the web server’s location.  You can use regex expression, as stated in the configuration file, in order for the plugin to &lt;strong&gt;search a specific string&lt;/strong&gt; in the website.&lt;/p&gt;

&lt;p&gt;This is handful in case the PHP server has crashed, so nginx does not return the proper website, but rather the nginx home screen. HTTP (200) is returned either way, meaning that httpcheck &lt;em&gt;without&lt;/em&gt; regex can’t tell the difference.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/netdata/edit-config python.d/httpcheck.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;📃&lt;em&gt;docs page:&lt;/em&gt; &lt;a href=&quot;https://docs.netdata.cloud/collectors/python.d.plugin/httpcheck/&quot;&gt;https://docs.netdata.cloud/collectors/python.d.plugin/httpcheck/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;db-engine&quot;&gt;DB engine&lt;/h3&gt;

&lt;p&gt;DB engine is the custom database implemented and used by netdata. It stores most recent data in-memory and “spills” historical data into the disk, compressing them to increase storage performance even further.  Notably, it is optimised for HDDs, offering performance that is acceptable versus the more efficient SSDs.&lt;/p&gt;

&lt;p&gt;The configuration variables that are of interest to us are the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[global]
    page cache size = 32
    dbengine disk space = 256
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;page cache size&lt;/code&gt; sets the maximum amount of RAM (in MiB) the database engine will use for caching and indexing. &lt;code class=&quot;highlighter-rouge&quot;&gt;dbengine disk space&lt;/code&gt; sets the maximum disk space (again, in MiB) the database engine will use for storing compressed metrics.&lt;/p&gt;

&lt;p&gt;These default settings will retain about &lt;strong&gt;a day’s worth&lt;/strong&gt; of metrics when Netdata collects roughly &lt;strong&gt;4,000 metrics every second.&lt;/strong&gt; If you increase either &lt;code class=&quot;highlighter-rouge&quot;&gt;page cache size&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;dbengine disk space&lt;/code&gt;, Netdata will retain even more historical metrics.&lt;/p&gt;

&lt;p&gt;The use-case of production web-server involves roughly 2,000 metrics per second, thus the default settings will save 2 days worth of data. &lt;strong&gt;For a retention period of 1 week, the following settings are advised.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When using the dbengine, the &lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt; configuration variable is irrelevant, please ignore it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[global]
    page cache size = 32
    dbengine disk space = 1024 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;strong&gt;both fields affect the memory footprint&lt;/strong&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;dbengine&lt;/code&gt; and as a result netdata in general. For the specific use-case tests were conducted and was decided that the change in memory consumption &lt;strong&gt;is not noteworthy&lt;/strong&gt;. For more info: https://docs.netdata.cloud/database/engine/#memory-requirements&lt;/p&gt;

&lt;p&gt;🙏  &lt;em&gt;With the database engine active, you can back up your /var/cache/netdata/dbengine/ folder to another location for redundancy.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dbengine docs:&lt;/strong&gt; &lt;a href=&quot;https://docs.netdata.cloud/database/engine&quot;&gt;https://docs.netdata.cloud/database/engine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dbengine &amp;amp; history retention period:&lt;/strong&gt; &lt;a href=&quot;https://docs.netdata.cloud/docs/tutorials/longer-metrics-storage/&quot;&gt;https://docs.netdata.cloud/docs/tutorials/longer-metrics-storage/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;health--alarms&quot;&gt;Health &amp;amp; Alarms&lt;/h2&gt;

&lt;p&gt;Each Netdata node runs an independent thread evaluating health monitoring checks. This thread has lock free access to the database, so that it can operate as a watchdog.&lt;/p&gt;

&lt;p&gt;Netdata also supports alarm &lt;strong&gt;templates&lt;/strong&gt;, so that an alarm can be attached to all the charts of the same context (i.e. all network interfaces, or all disks, or all mysql servers, etc.).&lt;/p&gt;

&lt;p&gt;Each alarm can execute a single query to the database using statistical algorithms against past data, but alarms can be combined. So, if you need 2 queries in the database, you can combine 2 alarms together (both will run a query to the database, and the results can be combined).&lt;/p&gt;

&lt;p&gt;For the given use case, we will be using the stock alarms as they cover all the scenarios. The user is advised to adjust the alarms in the future for more fine-grained controls.&lt;/p&gt;

&lt;p&gt;To edit the configuration files for the alarms of each plugin, we will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;edit-config&lt;/code&gt; command, like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Example for editing the alarms of the httpcheck plugin&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/netdata/edit-config health.d/httpcheck.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To get an easy overview over the active alarms, head over to the &lt;strong&gt;dashboard&lt;/strong&gt; and click on the &lt;strong&gt;Alarms section&lt;/strong&gt; at the top. After clicking the category &lt;strong&gt;all&lt;/strong&gt;, you can overview the activated alarms, their configuration and an apt description.&lt;/p&gt;

&lt;h3 id=&quot;notifications&quot;&gt;Notifications&lt;/h3&gt;

&lt;p&gt;An important aspect of the alarms component is the notification functionality. Netdata is able to inform the user on important events, via multiple mediums, from e-mail to discord integration.&lt;/p&gt;

&lt;p&gt;To configure the alarming configuration (such as email recipient, etc.) we edit the following configuration file:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/netdata/edit-config health_alarm_notify.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since we will be using  &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt;, we only edit the following variables inside the configuration file, moreover if we want to enable the notifications &lt;strong&gt;ONLY&lt;/strong&gt; for critical alarms, please follow the mentioned structure:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEFAULT_RECIPIENT_EMAIL=&quot;YOUR_EMAIL&quot;
# to receive only critical alarms, set it to &quot;YOUR_EMAIL|critical&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;email-configuration&quot;&gt;Email Configuration&lt;/h3&gt;

&lt;p&gt;To configure email with netdata, the user needs to configure a terminal email client. &lt;code class=&quot;highlighter-rouge&quot;&gt;sendemail&lt;/code&gt; is advised as is one of the most common clients and also the default choice for netdata.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To configure please follow the instructions:&lt;/strong&gt; &lt;a href=&quot;https://dbaron.org/linux/sendmail&quot;&gt;https://dbaron.org/linux/sendmail&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information on the syntax of the alarms (in order to fine tune the alarm criteria or add new alarms), please visit the health.d docs and the badges doc (they use same structure).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Health.d:&lt;/strong&gt; &lt;a href=&quot;https://docs.netdata.cloud/health/&quot;&gt;https://docs.netdata.cloud/health/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Badges:&lt;/strong&gt; &lt;a href=&quot;https://docs.netdata.cloud/web/api/badges/&quot;&gt;https://docs.netdata.cloud/web/api/badges/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;streaming&quot;&gt;Streaming&lt;/h2&gt;

&lt;p&gt;Each Netdata is able to replicate/mirror its database to another Netdata, by streaming collected metrics, in real-time to it. This is quite different to data archiving to third party time-series databases.&lt;/p&gt;

&lt;p&gt;When Netdata streams metrics to another Netdata, the receiving one is able to perform everything a Netdata instance is capable of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;visualize them with a dashboard&lt;/li&gt;
  &lt;li&gt;run health checks that trigger alarms and send alarm notifications&lt;/li&gt;
  &lt;li&gt;archive metrics to a backend time-series database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Per the requirements, we will be using a &lt;strong&gt;slave-master setup&lt;/strong&gt;, where a node will behave as the master node and gateway to the system, while each slave will only serve as aggregator of data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In essence the Master Netdata node will have 2 databases from which it will draw charts and raise alarms.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first database is from the machine where the master node is installed&lt;/li&gt;
  &lt;li&gt;The second database is from the machine where the slave node is installed&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;master-node&quot;&gt;Master Node&lt;/h3&gt;

&lt;p&gt;When setting up the Master Node, we will be configuring settings for API_KEYS and not for distinct slaves, meaning that master node will treat each slave that is configured with an identical API_KEY, the same.&lt;/p&gt;

&lt;p&gt;Depending on the use case, we might want to have different settings for different slave machines (e.g different history retention policy). We generate &lt;code class=&quot;highlighter-rouge&quot;&gt;N API_KEYS&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; distinct &lt;code class=&quot;highlighter-rouge&quot;&gt;slave groups&lt;/code&gt;. All the &lt;code class=&quot;highlighter-rouge&quot;&gt;slaves&lt;/code&gt; that belong to the same &lt;code class=&quot;highlighter-rouge&quot;&gt;slave group&lt;/code&gt; will be treated the same by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Master Node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To generate &lt;code class=&quot;highlighter-rouge&quot;&gt;N API_KEYS&lt;/code&gt;, we run N times the command: &lt;code class=&quot;highlighter-rouge&quot;&gt;uuidgen&lt;/code&gt;. In our case, we generate only one (1) &lt;code class=&quot;highlighter-rouge&quot;&gt;API_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now it is time to setup the &lt;strong&gt;Master Node&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup netdata (without installing any extra libraries, as Netdata Master will only monitor the system and itself, serving as the central hub of the metrics from all the slaves).
    &lt;ol&gt;
      &lt;li&gt;Note that the Master Node will have extra requirements in RAM and disk storage as it will retain 2 databases for the slaves (2000 metrics/s) and 1 database for  the Master (1500 metrics/s), for one week.&lt;/li&gt;
      &lt;li&gt;For more information on the DBengine’s requirements, please read &lt;a href=&quot;https://github.com/netdata/netdata/blob/master/docs/tutorials/longer-metrics-storage.md&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://docs.netdata.cloud/database/engine/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;edit &lt;code class=&quot;highlighter-rouge&quot;&gt;stream.conf&lt;/code&gt; and set &lt;code class=&quot;highlighter-rouge&quot;&gt;[stream].enabled: yes&lt;/code&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /etc/netdata/edit-config stream.conf&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;API_KEY&lt;/code&gt; mentioned bellow is the &lt;code class=&quot;highlighter-rouge&quot;&gt;API_KEY&lt;/code&gt; we generated using &lt;code class=&quot;highlighter-rouge&quot;&gt;uuidgen&lt;/code&gt;.
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[API_KEY] 
 enabled = yes
 default history = 3600
 default memory mode = dbengine
 health enabled by default = auto
 allow from = *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;For the initial testing period we won’t be editing anything else. You can return later to customise it according to your specific needs.&lt;/li&gt;
  &lt;li&gt;Since both the machines belong to the same secured network, we won’t be needing authentication and TLS support.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find in-detail explanation of all the available configuration options for the streaming functionality in the docs.&lt;/p&gt;

&lt;p&gt;📃&lt;em&gt;docs:&lt;/em&gt; &lt;a href=&quot;https://docs.netdata.cloud/streaming/&quot;&gt;https://docs.netdata.cloud/streaming/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;slave-node&quot;&gt;Slave Node&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The setup of each slave Node is identical:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup netdata and the required libraries according to the guide above
    &lt;ol&gt;
      &lt;li&gt;When setting up the dbengine, use the default settings that will allow close to 2 days word of data to be stored in the slave for redundancy.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;edit &lt;code class=&quot;highlighter-rouge&quot;&gt;stream.conf&lt;/code&gt;
    &lt;ol&gt;
      &lt;li&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;API_KEY&lt;/code&gt; that was generated in the Master Slave phase.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /etc/netdata/stream.conf&lt;/code&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[stream]
 enabled = yes 
 destination = IP:PORT #Master
 api key = API_KEY #generated in step (1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;Now each slave node is configured to stream the entirety of the metrics that it collects to the master node.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;registry&quot;&gt;Registry&lt;/h2&gt;

&lt;p&gt;Using Netdata, your monitoring infrastructure is embedded on each server, limiting significantly the need of additional resources. Netdata is blazingly fast, very resource efficient and utilizes server resources that already exist and are spare (on each server). This allows &lt;strong&gt;scaling out&lt;/strong&gt; the monitoring infrastructure.&lt;/p&gt;

&lt;p&gt;However, the Netdata approach introduces a few new issues that need to be addressed, one being &lt;strong&gt;the list of Netdata we have installed&lt;/strong&gt;, i.e. the URLs our Netdata servers are listening.&lt;/p&gt;

&lt;p&gt;To solve this, Netdata utilizes a &lt;strong&gt;central registry&lt;/strong&gt;. This registry, together with certain browser features, allow Netdata to provide unified cross-server dashboards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The registry keeps track of 4 entities:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;machines&lt;/strong&gt;: i.e. the Netdata installations (a random GUID generated by each Netdata the first time it starts; we call this &lt;strong&gt;machine_guid&lt;/strong&gt;)&lt;/p&gt;

    &lt;p&gt;For each Netdata installation (each &lt;code class=&quot;highlighter-rouge&quot;&gt;machine_guid&lt;/code&gt;) the registry keeps track of the different URLs it is accessed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;persons&lt;/strong&gt;: i.e. the web browsers accessing the Netdata installations (a random GUID generated by the registry the first time it sees a new web browser; we call this &lt;strong&gt;person_guid&lt;/strong&gt;)&lt;/p&gt;

    &lt;p&gt;For each person, the registry keeps track of the Netdata installations it has accessed and their URLs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;URLs&lt;/strong&gt; of Netdata installations (as seen by the web browsers)&lt;/p&gt;

    &lt;p&gt;For each URL, the registry keeps the URL and nothing more. Each URL is linked to &lt;em&gt;persons&lt;/em&gt; and &lt;em&gt;machines&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;accounts&lt;/strong&gt;: i.e. the information used to sign-in via one of the available sign-in methods. Depending on the method, this may include an email, an email and a profile picture. &lt;strong&gt;Only applicable via cloud log-in.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Local Registry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For security purposes and per the production web-server requirements, we will be establishing an agent node as a local registry and then configure all the netdata nodes to advertise themselves to that registry. This way, the user will be able to access the local registry and easily navigate towards all the available netdata instances.&lt;/p&gt;

&lt;p&gt;🔧 To turn any Netdata into a registry, edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/netdata/netdata.conf&lt;/code&gt; and set:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[registry]
    enabled = yes
    registry to announce = http://&amp;lt;netdata_host_ip&amp;gt;:19999
    registry hostname = Master node #hostname used only in the registry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And now set the other netdata instances to advertise to that registry, edit again &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/netdata/netdata.conf&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[registry]
    enabled = no
    registry to announce = http://&amp;lt;netdata_host_ip&amp;gt;:19999
        registry hostname = Slave node #hostname used only in the registry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;No additional configuration is required. Restart netdata and head over to the Dashboard to evaluate setup.&lt;/p&gt;

&lt;p&gt;📃&lt;em&gt;docs:&lt;/em&gt; &lt;a href=&quot;https://docs.netdata.cloud/registry/&quot;&gt;https://docs.netdata.cloud/registry/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;backends-long-term-storage&quot;&gt;Backends (Long-term Storage)&lt;/h2&gt;

&lt;p&gt;Up until this point, netdata has been setup to save data for 1 week in the Master Node and for 1 day in the slave Node.&lt;/p&gt;

&lt;p&gt;Remember that the slave’s database is been replicated to the Master Node, with retention period of 1 week.&lt;/p&gt;

&lt;p&gt;To enable long-term historic data we will be using the backends functionality of netdata. According to the requirements, we will be using Prometheus to grab data from the Master Node and save it in a time-series long term database.&lt;/p&gt;

&lt;p&gt;In essence, we will point &lt;strong&gt;Prometheus&lt;/strong&gt; to &lt;strong&gt;netdata&lt;/strong&gt; in order to fetch data and &lt;strong&gt;Grafana&lt;/strong&gt; to &lt;strong&gt;Prometheus&lt;/strong&gt; in order to visualize them.&lt;/p&gt;

&lt;p&gt;We will set the Prometheus sampling at 3m, since for historic data 1s accuracy is not required.&lt;/p&gt;

&lt;h3 id=&quot;prometheus-installation&quot;&gt;Prometheus Installation&lt;/h3&gt;

&lt;p&gt;We will be installing Prometheus on the machine where the Netdata Master Node runs.&lt;/p&gt;

&lt;p&gt;To install Prometheus run the following commands:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://api.github.com/repos/prometheus/prometheus/releases/latest &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
| &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;browser_download_url.*linux-amd64.tar.gz&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
| &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 4 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
| wget &lt;span class=&quot;nt&quot;&gt;-qi&lt;/span&gt; -

&lt;span class=&quot;c&quot;&gt;# create Prometheus user&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;useradd &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; prometheus

&lt;span class=&quot;c&quot;&gt;# create prometheus directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /opt/prometheus
&lt;span class=&quot;nb&quot;&gt;sudo chown &lt;/span&gt;prometheus:prometheus /opt/prometheus

&lt;span class=&quot;c&quot;&gt;# Untar prometheus directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; /tmp/prometheus-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;linux-amd64.tar.gz &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /opt/prometheus &lt;span class=&quot;nt&quot;&gt;--strip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;prometheus-configuration&quot;&gt;Prometheus Configuration&lt;/h3&gt;

&lt;p&gt;Prometheus is setup using &lt;code class=&quot;highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; .&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;run &lt;code class=&quot;highlighter-rouge&quot;&gt;touch prometheus.yaml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nano prometheus.yaml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Copy the following configuration, replace NETDATA_IP with localhost:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;# my global config&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;s&quot;&gt;3m&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Set the scrape interval to every 5 seconds. Default is every 1 minute.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;evaluation_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Evaluate rules every 5 seconds. The default is every 1 minute.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# scrape_timeout is set to the global default (10s).&lt;/span&gt;
    
      &lt;span class=&quot;c1&quot;&gt;# Attach these labels to any time series or alerts when communicating with&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# external systems (federation, remote storage, Alertmanager).&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;external_labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;codelab-monitor'&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rule_files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# - &quot;first.rules&quot;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# - &quot;second.rules&quot;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# A scrape configuration containing exactly one endpoint to scrape:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Here it's Prometheus itself.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scrape_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# The job name is added as a label `job=&amp;lt;job_name&amp;gt;` to any timeseries scraped from this config.&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;prometheus'&lt;/span&gt;
    
        &lt;span class=&quot;c1&quot;&gt;# metrics_path defaults to '/metrics'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# scheme defaults to 'http'.&lt;/span&gt;
    
        &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.0.0.0:9090'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;netdata-scrape'&lt;/span&gt;
    
        &lt;span class=&quot;na&quot;&gt;metrics_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/api/v1/allmetrics'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# format: prometheus | prometheus_all_hosts&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# You can use `prometheus_all_hosts` if you want Prometheus to set the `instance` to your hostname instead of IP &lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prometheus_all_hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#stream both Master &amp;amp; Slave node&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# sources: as-collected | raw | average | sum | volume&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# default is: average&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;#source: [as-collected]&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# server name for this prometheus - the default is the client IP&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# for Netdata to uniquely identify it&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;#server: ['prometheus1']&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;honor_labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    
        &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;netdata_host_ip&amp;gt;:19999'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Some notes on the configuration :&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We set the source as &lt;code class=&quot;highlighter-rouge&quot;&gt;average&lt;/code&gt; which is the default setting. It means that Prometheus will store the average value of each interval (3m). If we set &lt;code class=&quot;highlighter-rouge&quot;&gt;as-collected&lt;/code&gt;, we would be saving the exact value of each metric every 3 minutes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prometheus_all_hosts:&lt;/strong&gt; It facilitates storage &amp;amp; retrieval, since each metric is saved with a prefix depending on the host_machine from where it originated (remember, we have 2 machines).&lt;/li&gt;
  &lt;li&gt;Prometheus needs only to point to the Master Node. Master Node will export both it’s databases.&lt;/li&gt;
  &lt;li&gt;For all intents and purposes, we will be using the default settings for Prometheus&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;test-prometheus&quot;&gt;Test Prometheus&lt;/h3&gt;

&lt;p&gt;👉👉👉👉 Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;[http://localhost:9090](http://localhost:9090)&lt;/code&gt; to verify that everything is working.&lt;/p&gt;

&lt;p&gt;Please don’t forget to verify that the system’s firewall allows prometheus to be accessed from the web. For more information, please refer back to the &lt;a href=&quot;https://www.notion.so/odyslamtzidis/Netdata-guide-for-Production-Web-Server-Nginx-PHP-fpm-MariaDB-f17397f9c8524765bb06adec59aa2087#8bf84260bb0c47e8bdb17f5b006e097d&quot;&gt;Firewall Section&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can read more in detail on how to setup Prometheus for more customised options at the docs:&lt;/p&gt;

&lt;p&gt;📃 &lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/getting_started/&quot;&gt;https://prometheus.io/docs/prometheus/latest/getting_started/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;prometheus-service&quot;&gt;Prometheus Service&lt;/h3&gt;

&lt;p&gt;Finally, it’s needed to create and install prometheus as a service. Follow the commands:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo touch&lt;/span&gt; /etc/systemd/system/prometheus.service
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nano /etc/systemd/system/prometheus.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and paste the following text inside the service file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=Prometheus Server
AssertPathExists=/opt/prometheus

[Service]
Type=simple
WorkingDirectory=/opt/prometheus
User=prometheus
Group=prometheus
ExecStart=/opt/prometheus/prometheus --config.file=/opt/prometheus/prometheus.yml --log.level=info
ExecReload=/bin/kill -SIGHUP $MAINPID
ExecStop=/bin/kill -SIGINT $MAINPID

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start prometheus
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;prometheus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;prometheus-and-high-availability&quot;&gt;Prometheus and High-Availability&lt;/h3&gt;

&lt;p&gt;At this point, it is important to make a succinct note on Prometheus as a production-ready Long-Term Storage solution. In reality Prometheus is not intended to be used for long-term archiving, despite it’s efficiency (1.3 bytes/sample)  because it does not support High-Availability and Fault-Tolerance capabilities out of the box.&lt;/p&gt;

&lt;p&gt;It is recommended for the user to research the following Open-Source projects that are placed &lt;em&gt;on top of Prometheus&lt;/em&gt; and provide such functionality:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Thanos&lt;/strong&gt;: &lt;a href=&quot;https://thanos.io/&quot;&gt;Thanos&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cortex&lt;/strong&gt;: &lt;a href=&quot;https://github.com/cortexproject&quot;&gt;Cortex&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;M3&lt;/strong&gt;: &lt;a href=&quot;https://github.com/m3db/m3/&quot;&gt;m3db/m3&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;grafana&quot;&gt;Grafana&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The installation of Grafana is more straight forward, per the use-case and for easy management, the use of docker containers is advised.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install docker:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;apt-transport-https ca-certificates curl software-properties-common

curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://download.docker.com/linux/ubuntu/gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-ce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Run Grafana container:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3000:3000  grafana/grafana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that using the above command, we run Grafana as a “program” and it’s more about testing our setup, rather than deploying in for production.&lt;/p&gt;

&lt;p&gt;In order to ensure that Grafana will &lt;strong&gt;always&lt;/strong&gt; run, we need to make docker start on reboot, following the &lt;a href=&quot;https://docs.docker.com/install/linux/linux-postinstall//#configure-docker-to-start-on-boot&quot;&gt;Docker documentation&lt;/a&gt; and then run the container using the following argument:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3000:3000 &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt; unless-stopped  grafana/grafana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Grafana Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please don’t forget to verify that the system’s firewall allows Grafana to be accessed from the web. For more information, please refer back to the &lt;a href=&quot;https://www.notion.so/odyslamtzidis/Netdata-guide-for-Production-Web-Server-Nginx-PHP-fpm-MariaDB-f17397f9c8524765bb06adec59aa2087#8bf84260bb0c47e8bdb17f5b006e097d&quot;&gt;Firewall Section&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Visit &lt;a href=&quot;http://localhost:3000/%E2%80%99&quot;&gt;http://localhost:3000/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Login with &lt;strong&gt;username&lt;/strong&gt;: Admin, &lt;strong&gt;Password&lt;/strong&gt;: Admin&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Add data source&lt;/strong&gt; and point it to Prometheus (&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:9090&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Finally, start by creating a new dashboard and adding graphs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;📃More information on starting with Grafana: &lt;a href=&quot;https://grafana.com/docs/guides/getting_started/&quot;&gt;https://grafana.com/docs/guides/getting_started/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;acknowledgement&quot;&gt;Acknowledgement&lt;/h1&gt;

&lt;p&gt;I would like to thank Spyros Konstantopoulos, System Administrator at the &lt;a href=&quot;http://www.upatras.gr/en&quot;&gt;University of Patras&lt;/a&gt; and Dimitrios Giannopoulos, PhD student at the &lt;a href=&quot;http://nam.ece.upatras.gr/&quot;&gt;Network Architecture &amp;amp; Management Group&lt;/a&gt; of the &lt;a href=&quot;http://www.ece.upatras.gr/index.php/el/&quot;&gt;ECE department,&lt;/a&gt; for their feedback and insightful comments on this work.&lt;/p&gt;

&lt;h1 id=&quot;comments&quot;&gt;Comments&lt;/h1&gt;
</description>
        <pubDate>Mon, 30 Mar 2020 00:00:00 +0300</pubDate>
        <link>https://odyslam.me/blog/Netdata-installation-production-web-server/</link>
        <guid isPermaLink="true">https://odyslam.me/blog/Netdata-installation-production-web-server/</guid>
        
        <category>2020</category>
        
        <category>tutorial</category>
        
        <category>technology</category>
        
        
      </item>
    
  </channel>
</rss>
