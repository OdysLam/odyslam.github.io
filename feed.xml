<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Project L</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://odyslam.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://odyslam.github.io" />
<updated>2016-04-15T14:46:28+03:00</updated>
<id>http://odyslam.github.io/</id>
<author>
  <name>Odysseas Lamtzidis</name>
  <uri>http://odyslam.github.io/</uri>
  <email>odyslam@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Let's get into (Monty) Python]]></title>
 <link rel="alternate" type="text/html" href="http://odyslam.github.io/python-post/" />
  <id>http://odyslam.github.io/python-post</id>
  <updated>2016-04-25T00:00:00-00:00</updated>
  <published>2016-04-03T00:00:00+03:00</published>
  
  <author>
    <name>Odysseas Lamtzidis</name>
    <uri>http://odyslam.github.io</uri>
    <email>odyslam@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;the-script&quot;&gt;The script:&lt;/h2&gt;

&lt;p&gt;As I mentioned before, we are going to start with examining the python code, later we will move to javascript and html.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;You can find the full code uploaded to github &lt;em&gt;&lt;a href=&quot;https://github.com/OdysLam/GLaDOS-project/blob/master/script.py&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But let’s take things from the start:&lt;/p&gt;

&lt;p&gt;Firstly, I do my imports:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;webiopi&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wakeonlan&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wol&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pi_switch&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;vncdotool&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see I import a number of libraries, I am going to get into detail in later posts so as to keep this post nice and clean. I will explain where each and every library that is needed.&lt;/p&gt;

&lt;p&gt;The next important part is where I define the  pins I am going to use. This way, I can easily change the pins by just changing the variable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;SERVO&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OutDoor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is the GPIO pinout again, you can see the corresponding number of each pin as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.toptechboy.com/wp-content/uploads/2015/06/raspberry-pi-2-pinout.jpg&quot; alt=&quot;GPIO PINOUT&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I said before, we have 3 basic functions that are defined by webiopi: &lt;em&gt;loop&lt;/em&gt;-&lt;em&gt;setup&lt;/em&gt;-&lt;em&gt;destroy&lt;/em&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Loop&lt;/code&gt; is self explanatory, &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; is run once when the webiopi service starts and &lt;code class=&quot;highlighter-rouge&quot;&gt;detroy&lt;/code&gt; when we shut it down.&lt;/p&gt;

&lt;h4 id=&quot;setup&quot;&gt;Setup:&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;webiopi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Script with macros - Setup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Servo&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Servo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutDoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERVO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CloseUDoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# set to 0 (neutral)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutDoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heater&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Heater&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;192.168.1.20&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#example&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi_switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCSwitchSender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enableTransmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First good programming advice is to &lt;em&gt;always&lt;/em&gt; include debuging output functions so as you can monitor the program when you run it in debuging mode.&lt;/p&gt;

&lt;p&gt;Now, as far as webiopi is concerned, the &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.setFunction(pin_number,type)&lt;/code&gt; it’s the first step, as it informs webiopi on what &lt;em&gt;kind&lt;/em&gt; of pin each pin is . For example, here I have set  we &lt;code class=&quot;highlighter-rouge&quot;&gt;OutDoor&lt;/code&gt; pin to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.OUT&lt;/code&gt;, in other words, a simple digital output (either 0v or 3.3v).&lt;/p&gt;

&lt;p&gt;The servo pin must be set as pwm(pulse width modulation), for which you can read more about &lt;a href=&quot;http://www.jameco.com/jameco/workshop/howitworks/how-servo-motors-work.html&quot;&gt;here&lt;/a&gt;.
Webiopi has it’s own library to deal with servos, meaning that the needed pulse will be generated by the library and we don’t need to code it(you can code it by just setting a loop for the pin to turn on/off rappidly).We are just going to call the appropriate webiopi function and set the needed angle.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CloseUdoor&lt;/code&gt; is the function responsible for locking the door.(more later)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.digitalWrite(a,b)&lt;/code&gt; produces an output at the “a” pin,the output can be either logic HIGH or LOW (3,3v or 0v)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we have some library-specific functions that as I have said will be covered later when we speak about the various libraries.&lt;/p&gt;

&lt;h2 id=&quot;some-custom-functions&quot;&gt;Some custom functions:&lt;/h2&gt;

&lt;p&gt;The first function that we are going to cover is an easy one:&lt;/p&gt;

&lt;h3 id=&quot;lockingunlocking-buildings-door&quot;&gt;Locking/Unlocking building’s door:&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DownDoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;webiopi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OpenDdoor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutDoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CloseDDoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s job is to to unlock my building’s door. By setting the pin either HIGH or LOW I enable or not current through a simple relay. The door would normaly unlock as long as I press a button, instead of that, I have connected the appropriate wires to a relay that will play the button’s role.&lt;/p&gt;

&lt;p&gt;In order to turn it off again (and stop unlocking the door) I use the &lt;code class=&quot;highlighter-rouge&quot;&gt;threading.Timer(seconds,function)&lt;/code&gt; function that is defined along with it’s library &lt;code class=&quot;highlighter-rouge&quot;&gt;threading&lt;/code&gt; &lt;a href=&quot;https://docs.python.org/2/library/threading.html#timer-objects&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The wonderful thing about this timer it’s that not only it does not freeze our program while waiting for it to execute (like webiopi.sleep), but we can also stop the Timer with the appropriate function. This way we can make sure that accidently executing a command won’t end in overlapping Timers that will both run the function.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;Although I have not used them in the current version, it’s an addition that has to be made.&lt;/p&gt;

&lt;h3 id=&quot;lockingunlocking-appartments-door&quot;&gt;Locking/Unlocking appartment’s door:&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UpDoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;webiopi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OpenUdoor=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Servo&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;webiopi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Servo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Servo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;notify_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Door Unlocked&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notify_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;webiopi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;#webiopi.sleep(0.01)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwmWriteAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERVO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Servo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;enter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CloseUDoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;leave&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CloseUDoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;knock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CloseUDoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ok, don’t panic, it’s actually fairly straight forward.&lt;/p&gt;

&lt;p&gt;Firstly, I use a global variable named Servo so as to track whether my door is locked or unlocked. This way I can prevent the servo from trying turn the gears while it’s arleady locked and thus potentially damage it.&lt;/p&gt;

&lt;p&gt;Then, I check wether it’s locked &lt;code class=&quot;highlighter-rouge&quot;&gt;Servo==0&lt;/code&gt; and if it is, I send an alert to my weaved app on my iphone.(more later)&lt;/p&gt;

&lt;h3 id=&quot;stop-right-there-you-criminal-scum&quot;&gt;Stop right there you criminal scum!&lt;/h3&gt;

&lt;p&gt;Before we go any further we need to understand some basic principles about servo because they tend to have an &lt;em&gt;arcane&lt;/em&gt; behaviour.&lt;/p&gt;

&lt;p&gt;As you have read already,the servo position is defined by the length of the pulse or in other words it’s duty cycle. Every servo has it’s own default settings. For example,mine works in the range of &lt;em&gt;500μs το 2500μs&lt;/em&gt;, meaning that 1500μs is the &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; degrees. Moreover, for every 45 degrees, either + or -, the duty cycle is + or - 500μs.&lt;/p&gt;

&lt;p&gt;Webiopi’s servo library uses the futaba standard, meaning that 0 is defined as 1520μs with a 400μs per 45 degrees.&lt;/p&gt;

&lt;p&gt;Thus, in my code, my servo will go &lt;code class=&quot;highlighter-rouge&quot;&gt;from -90 to +90 degrees&lt;/code&gt;. This is very important, because depending on the servo you may need to adjust the code to &lt;code class=&quot;highlighter-rouge&quot;&gt;from 0 to 180 degrees&lt;/code&gt; if for example your servo works in the area of (1500μs-3500μs).&lt;/p&gt;

&lt;h3 id=&quot;so&quot;&gt;So..&lt;/h3&gt;
&lt;p&gt;I want the servo to turn as smoothly as possible, to accomplish that, I use a loop to set the angle to a range of (-90,+90). I could just set it straight to +90, but it wouldn’t be that smooth and may cause problems with the lock.&lt;/p&gt;

&lt;p&gt;Lastly, depending on the button I press on my interface, I run the function with a different argument which determines how much time it will take to run the function that locks the door again.(for example, if I am leaving, I just need a 10 sec window to open the door, exit my appartment and then close it so it locks again)&lt;/p&gt;

&lt;p&gt;Cool, by now you should have started getting comfortable with the python code, in the next posts we will be covering more libraries and functions.&lt;/p&gt;

&lt;h3 id=&quot;important&quot;&gt;Important!&lt;/h3&gt;
&lt;p&gt;Remember that if you want to follow this project from the first post, go to the posts tab and click All Posts.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://odyslam.github.io/python-post/&quot;&gt;Let&#39;s get into (Monty) Python&lt;/a&gt; was originally published by Odysseas Lamtzidis at &lt;a href=&quot;http://odyslam.github.io&quot;&gt;Project L&lt;/a&gt; on April 03, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[In webiopi we trust]]></title>
 <link rel="alternate" type="text/html" href="http://odyslam.github.io/webiopi-post/" />
  <id>http://odyslam.github.io/webiopi-post</id>
  <updated>2016-04-25T00:00:00-00:00</updated>
  <published>2016-03-26T00:00:00+02:00</published>
  
  <author>
    <name>Odysseas Lamtzidis</name>
    <uri>http://odyslam.github.io</uri>
    <email>odyslam@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;glados-framework&quot;&gt;GLaDOS Framework&lt;/h2&gt;

&lt;p&gt;Ok, you have your Raspberry up and running as it’s sits quietly somewhere in the house. Now let’s examine the software framework of GLaDOS.&lt;/p&gt;

&lt;p&gt;The main library-framework we are going to use is called &lt;a href=&quot;http://webiopi.trouch.com/&quot;&gt;Webiopi&lt;/a&gt; and it’s a wonderful, yet quite hard and suprisingly undocumented, tool.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;em&gt;From the site:&lt;/em&gt;
WebIOPi includes an HTTP server that provides both HTML resources and a REST API to control things. Your browser will first load a HTML file, then the included Javascript will make Asynchronous calls to the REST API to control and update the UI. This method is very efficient, because it don’t need to refresh and download the whole page.&lt;/p&gt;

&lt;h3 id=&quot;that-doesnt-seem-that-simple&quot;&gt;That doesn’t seem that simple&lt;/h3&gt;

&lt;p&gt;Well, actually it’s not &lt;em&gt;that&lt;/em&gt; hard if you have some basic knowledge on how websites and servers work. The most straight-forward approach is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Script file that is run by the python server and handles all Raspberry pi’s actions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Website that uses Javascript to call functions that are defined and run by the python script file. It means that all you have to do with js is to call the appropriate function in the script.
&lt;em&gt;using python as much as possible makes the project much easier.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Weaved IoT suite(3rd party program intergrated into webiopi) to be able to access the Rpi server(where the site is hosted) outside of the lan (without port-forwarding ,etc).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://trouch.com/wp-content/uploads/2014/01/webiopi-rest.png&quot; alt=&quot;overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the image, you can control the gpios using directly Javascript functions. It’s both impractical and hard for beginners. We are going to exclusively python functions that will be called from Javascript(i.e pressing a button,executes python function “A”).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: It works both on Rpi 1 and 2,  it just needs an update-fix and it works like a charm(going into detail later).&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation:&lt;/h2&gt;

&lt;p&gt;Firstly, let’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;to our Raspberry pi.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;open Terminal/Command line and type &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh pi@Rpi-Ip&lt;/code&gt;, where Rpi-Ip is the ip of your Raspberry pi,after it prompts for password, type it and hit enter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go &lt;a href=&quot;http://webiopi.trouch.com/DOWNLOADS.html&quot;&gt;here&lt;/a&gt; and download the latest version of webiopi to your computer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With filezilla put the file in the default directory of Rpi as shown bellow:
&lt;img src=&quot;http://i.imgur.com/ERiSEun.png&quot; alt=&quot;filezilla&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run these commands, where x.y.z is the version of WebIOPI you downloaded.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tar xvzf WebIOPi-x.y.z.tar.gz
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;WebIOPi-x.y.z
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo ./setup.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;5.????(profit)&lt;/p&gt;

&lt;p&gt;6.Congratulations, you just installed Webiopi successfully, now let’s change the password(better get rid of it) with this &lt;a href=&quot;http://webiopi.trouch.com/PASSWORD.html&quot;&gt;guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.Don’t do anything just yet, just open this &lt;a href=&quot;http://webiopi.trouch.com/INSTALL.html&quot;&gt;page&lt;/a&gt; and keep it open for future reference to run the appropriate commands.&lt;/p&gt;

&lt;p&gt;8.If you own a Raspberry pi 2, please visit this &lt;a href=&quot;https://github.com/doublebind/raspi&quot;&gt;github page&lt;/a&gt; and follow the instrutions to patch your webiopi. Don’t try to test webiopi examples/ready pages as they might not work.We are going to avoid using webiopi’s JS library as much as possible. 
In reality we are going to use only this command &lt;code class=&quot;highlighter-rouge&quot;&gt;webiopi.callmacro()&lt;/code&gt; which calls a function from the python script.&lt;/p&gt;

&lt;p&gt;If you own a Raspberry pi 3, this guide might work, might not. Webiopi is a bit old,undocumented and I am a beginner.
If it doesn’t, try this &lt;a href=&quot;https://groups.google.com/forum/#!forum/webiopi&quot;&gt;forum&lt;/a&gt; to find answers.&lt;/p&gt;

&lt;h2 id=&quot;lets-get-into-the-basics&quot;&gt;Let’s get into the basics.&lt;/h2&gt;

&lt;p&gt;As you can see from this &lt;a href=&quot;http://webiopi.trouch.com/Tutorial_Basis.html&quot;&gt;tutorial&lt;/a&gt;, the webiopi uses a certain skeleton structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;home
- pi
  - myproject
    - python
    - html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;em&gt;Important:&lt;/em&gt;
In this simple example, there are only a couple of lines of css/javascript so it’s easy to put them in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; file. It’s heavily advised that you create different folders and store each script in it’s own file. It’s a &lt;em&gt;VERY&lt;/em&gt; good programming practice(some would say necessary).&lt;/p&gt;

&lt;p&gt;There is a specific folder for your main python script and your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file, aka the mainpage.&lt;/p&gt;

&lt;p&gt;Now, try to test the tutorial, it’s a very good first test to see how this particular library works.I am not going to explain all the code in detail, just some parts that I believe are important and/or hard to understand.&lt;/p&gt;

&lt;h3 id=&quot;that-setup-loop-destroy-thingy-looks-familliar&quot;&gt;That setup-loop-destroy thingy looks familliar?&lt;/h3&gt;

&lt;p&gt;Yeah! Webiopi uses the same 3 function core as &lt;em&gt;arduino&lt;/em&gt; to facilitate us. We are definately going to use the setup function. Loop is kinda optional since I prefer to create my own loops whenever that’s necessary, so as to keep the stress to the cpu as low as possible.(we need this project to be stable &lt;em&gt;af&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&quot;that-javascript-code-seems-strange&quot;&gt;That Javascript code seems strange&lt;/h3&gt;

&lt;p&gt;That because it is, it’s an old javascript library inside the webiopi which can be used to create very simple, but extremely ugly, buttons and slides that by default can control various gpios. It’s of no use as we going to control the gpio through python functions that are going to be called from the javascript, that way we can use whatever element we want, it’s customisable 100%.&lt;/p&gt;

&lt;h3 id=&quot;webiopisleep&quot;&gt;Webiopi.sleep?&lt;/h3&gt;

&lt;p&gt;Well, that’s a way to slow-down loops. I prefer using the &lt;code class=&quot;highlighter-rouge&quot;&gt;threading.timer&lt;/code&gt; which is part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;threading&lt;/code&gt; library. This way while you wait for the timer , the script can still execute commands in contrast with the &lt;code class=&quot;highlighter-rouge&quot;&gt;webiopi.sleep&lt;/code&gt; function that totally freezes our script for the specified time.&lt;/p&gt;

&lt;p&gt;Now that we understand the structure of webiopi, it’s time to dwelve deeper into the code. We are going to take  a look at the python script in the next post.&lt;/p&gt;

&lt;p&gt;Remember that if you want to follow this project from the first post, go to the posts tab and click All Posts.&lt;/p&gt;

&lt;p&gt;Until then, cheers!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://odyslam.github.io/webiopi-post/&quot;&gt;In webiopi we trust&lt;/a&gt; was originally published by Odysseas Lamtzidis at &lt;a href=&quot;http://odyslam.github.io&quot;&gt;Project L&lt;/a&gt; on March 26, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Are you talking to me?]]></title>
 <link rel="alternate" type="text/html" href="http://odyslam.github.io/languages-post/" />
  <id>http://odyslam.github.io/languages-post</id>
  <updated>2016-04-24T00:00:00-00:00</updated>
  <published>2016-03-25T00:00:00+02:00</published>
  
  <author>
    <name>Odysseas Lamtzidis</name>
    <uri>http://odyslam.github.io</uri>
    <email>odyslam@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;know-your-languages&quot;&gt;Know your languages:&lt;/h2&gt;

&lt;p&gt;It’s important to know a set of programming languages in order to be able to understand the project.&lt;/p&gt;

&lt;h3 id=&quot;python&quot;&gt;Python&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://odyslam.github.io/images/pilogo.png&quot; alt=&quot;python&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most important is python, not only for this project, but for any raspberry pi project since it’s the main programming language. Python is a very easy-to-learn language as it has a very straight forward syntax ideal for beginners who just started learning programming. 
Also, it houses a shit-ton of libraries, which means that it’s very easy to do a lot of different things since others have done all the dirty programming work for you.&lt;/p&gt;

&lt;p&gt;As far as our project is concerned,for any possible upgrade or addition to the project that I have came up with (and they are a lot!) I still haven’t been able to find the appropriate library.&lt;/p&gt;

&lt;p&gt;I suggest you visit &lt;a href=&quot;https://www.codecademy.com/learn/python&quot;&gt;Code Academy&lt;/a&gt; to get a basic idea of how the language work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://odyslam.github.io/images/weblogo.png&quot; alt=&quot;Interface&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;html--css&quot;&gt;HTML &amp;amp; CSS&lt;/h3&gt;

&lt;p&gt;They are the basis for any webpage, and in our case, the web interface is no exception. It’s important that you are able to write basic &lt;code class=&quot;highlighter-rouge&quot;&gt;html/css&lt;/code&gt; code. Also, as most of the interface objects(buttons,menus, etc) can be found ready online, it’s important that you can read a piece of code, understand it and then take the part you want to apply to our interface.&lt;/p&gt;

&lt;p&gt;Also visit the appropriate &lt;a href=&quot;https://www.codecademy.com/learn/web&quot;&gt;course&lt;/a&gt; in Code Academy, it’s really worth the time.&lt;/p&gt;

&lt;h3 id=&quot;javascript&quot;&gt;Javascript&lt;/h3&gt;

&lt;p&gt;By far the hardest language of them all, I tried to teach my-self from webiopi tutorials and random searching, it’s really not worth the time. 
You can cut the learning time by half if you visit again this &lt;a href=&quot;https://www.codecademy.com/learn/javascript&quot;&gt;course&lt;/a&gt; in Code Academy and learn the basics. I strongly recccomend that you do that before you dwelve into webiopi because of the lack of documentation.&lt;/p&gt;

&lt;h2 id=&quot;lastly&quot;&gt;Lastly&lt;/h2&gt;

&lt;p&gt;Keep in mind that the more you know about web front-end development, the more sofisticated your interface will be, both in terms of beauty and usability. Also, I personally believe that being able to create a simple landing page is very a very important tool no matter the field of studies.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;No affiliation with Code Academy, I just find it ridiculously useful.&lt;/p&gt;
&lt;/blockquote&gt;

    &lt;p&gt;&lt;a href=&quot;http://odyslam.github.io/languages-post/&quot;&gt;Are you talking to me?&lt;/a&gt; was originally published by Odysseas Lamtzidis at &lt;a href=&quot;http://odyslam.github.io&quot;&gt;Project L&lt;/a&gt; on March 25, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[GlaDOS]]></title>
 <link rel="alternate" type="text/html" href="http://odyslam.github.io/GlaDOS-post/" />
  <id>http://odyslam.github.io/GlaDOS-post</id>
  <updated>2016-04-26T00:00:00-00:00</updated>
  <published>2016-03-24T00:00:00+02:00</published>
  
  <author>
    <name>Odysseas Lamtzidis</name>
    <uri>http://odyslam.github.io</uri>
    <email>odyslam@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;lets-get-into-detail&quot;&gt;Let’s get into detail&lt;/h2&gt;

&lt;p&gt;In this post I am going to explain thoroughly all the parts of the project so as you have an idea of what to come&lt;/p&gt;

&lt;h4 id=&quot;glados-its-just-the-name-i-have-given-to-my-project-since-she-is-one-of-my-favorite-villainsit-would-be-wise-to-avoid-building-the-actual-glados-since-it-might-cause-severe-painor-even-death&quot;&gt;GLaDOS it’s just the name I have given to my project since she is one of my favorite villains.It would be wise to avoid building the actual &lt;em&gt;GLaDOS&lt;/em&gt; since it might cause severe &lt;em&gt;pain&lt;/em&gt;,or even &lt;em&gt;death&lt;/em&gt;.&lt;/h4&gt;

&lt;h2 id=&quot;finally-what-does-it-do-&quot;&gt;Finally! What does it do? (°ロ°)☝&lt;/h2&gt;

&lt;p&gt;As I have said a thousand times it’s a smart-home project which aims at automating and facilitating a number of tasks, everything is controlled from a central web-page that is run locally on the Raspberry pi from a python server.&lt;/p&gt;

&lt;h3 id=&quot;tasks&quot;&gt;Tasks:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Lock/Unlock both the buildings door and the appartment’s. The first is done with the help of a relay and the second with the help of a servo and some 3D printed gears.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/3AqNrtK_Wmw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: I was still testing the script, that’s why I had set the lock/unlock time 2 sec.Now it’s automatically locks after 10-30-60 seconds depending on what button I press.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Control of 3 RF remote suko switches, by broadcasting a specific binary code I can turn on/off each switch remotely.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Control of Boiler. A power relay that uses AC as control signal is connected to an RF remote suko switch, same function as above. Bonus points for a software timer to fix the “Ooooh SHIT I forgot to turn off the boiler again”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remotely turn-on my computer by magic (packet).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;software&quot;&gt;Software:&lt;/h3&gt;

&lt;p&gt;To create the Interface, I built a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; page using html-css-javascript. In javascript I used the Jquery and webiopi libraries aswell.&lt;/p&gt;

&lt;p&gt;To complete the tasks in the script file I use a number of python libraries (or the python library version of programs), namely:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Webiopi&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;wakeonlan&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;vncdotool&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Pi_switch&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Which we will get into detail when we examine the python code later in the guide.&lt;/p&gt;

&lt;p&gt;In the end, the Interface looks something like this: 
&lt;img src=&quot;http://odyslam.github.io/images/interface.png&quot; alt=&quot;Interface&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hardware&quot;&gt;Hardware&lt;/h3&gt;

&lt;p&gt;We will closely examine the hardware as we analyse each task, but namely I am using:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://grobotronics.com/servo-standard-15kg.cm-metal-gears-feetech-fs5115m.html&quot;&gt;This Servo&lt;/a&gt; to turn the appartment’s door lock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Common Relay.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
	&lt;a href=&quot;http://img.dxcdn.com/productimages/sku_121354_2.jpg&quot;&gt;&lt;img src=&quot;http://img.dxcdn.com/productimages/sku_121354_2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;RF 434Mhz Link Transmitter, like &lt;a href=&quot;https://www.sparkfun.com/products/10534&quot;&gt;this one&lt;/a&gt; to signal the switches and a receiver to “listen” to the signal that turns them on/off,like &lt;a href=&quot;https://www.sparkfun.com/products/10532&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remotely controlled power switch, it usually works with 434Mhz radiowaves,but not always.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
	&lt;a href=&quot;http://vladsgadgets.com/wp-content/uploads/2010/09/Efergy_Standby_Eliminator_4_pack-e1284970166178.jpg&quot;&gt;&lt;img src=&quot;http://vladsgadgets.com/wp-content/uploads/2010/09/Efergy_Standby_Eliminator_4_pack-e1284970166178.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Power relay on rail, installed in the electrical panel.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
	&lt;a href=&quot;http://e-damianakis.gr/images/detailed/6/1411452914.jpg&quot;&gt;&lt;img src=&quot;http://e-damianakis.gr/images/detailed/6/1411452914.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Electronic Components(cables,regulators, etc)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that you have a concise idea of what to follow, we are going to start examining the software, more specifically the webiopi framework that is the A-Z of our project.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;See you in the next post! ☜(˚▽˚)☞&lt;/p&gt;
&lt;/blockquote&gt;


    &lt;p&gt;&lt;a href=&quot;http://odyslam.github.io/GlaDOS-post/&quot;&gt;GlaDOS&lt;/a&gt; was originally published by Odysseas Lamtzidis at &lt;a href=&quot;http://odyslam.github.io&quot;&gt;Project L&lt;/a&gt; on March 24, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Setting up the Raspberry]]></title>
 <link rel="alternate" type="text/html" href="http://odyslam.github.io/rpi-setup-post/" />
  <id>http://odyslam.github.io/rpi-setup-post</id>
  <updated>2016-04-24T00:00:00-00:00</updated>
  <published>2016-03-22T00:00:00+02:00</published>
  
  <author>
    <name>Odysseas Lamtzidis</name>
    <uri>http://odyslam.github.io</uri>
    <email>odyslam@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;lets-roll&quot;&gt;Let’s Roll&lt;/h2&gt;

&lt;p&gt;First things first, follow this guide:&lt;a href=&quot;https://www.raspberrypi.org/help/noobs-setup/&quot;&gt;Noob Guide.&lt;/a&gt; and install an OS to the Raspberry.&lt;/p&gt;

&lt;p&gt;Now that you have your system up and running let’s make our life a bit &lt;em&gt;easier&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It’s not easy to have rpi always connected to a screen and a keyboard, we are going to run it &lt;strong&gt;headless&lt;/strong&gt;. It means that we are going to use it’s terminal through the internet, from our computer. All we need is for the rpi to be connected to the internet and we also need to know it’s ip address.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Connect Rpi to the internet, either via ethernet or &lt;a href=&quot;https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md&quot;&gt;wi-fi dongle&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since it’s not cool to search and find the ip adress each time you want to fiddle with rpi, let’s make it have static ip according to this &lt;a href=&quot;http://www.modmypi.com/blog/tutorial-how-to-give-your-raspberry-pi-a-static-ip-address&quot;&gt;guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configure &lt;a href=&quot;https://www.raspberrypi.org/documentation/remote-access/ssh/&quot;&gt;ssh&lt;/a&gt; to gain command line control over the internet,using either command line in linux/OS X or a ssh client for Windows.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To gain easy access to your files and folders in rpi from your pc, download &lt;a href=&quot;https://filezilla-project.org/&quot;&gt;filezilla&lt;/a&gt; to your computer and then &lt;a href=&quot;https://www.raspberrypi.org/documentation/remote-access/ssh/sftp.md&quot;&gt;configure&lt;/a&gt; it for Rpi. it’s much easier to manipulate folders and files from this graphic design than from linux command line.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When you connect to your pi, it lookes something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ERiSEun.png&quot; alt=&quot;filezilla&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Optional&lt;/strong&gt;: Check this &lt;a href=&quot;https://www.raspberrypi.org/documentation/linux/usage/commands.md&quot;&gt;page&lt;/a&gt; as it contains a lot of useful commands. Thankfuly after some hours of Rpi experience you will start memorising the various commands, remember that command line is A-Z in Unix operating systems,like Lynux a.k.a Raspbian.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;so-now-that&quot;&gt;So, now that..&lt;/h2&gt;
&lt;figure&gt;
	&lt;a href=&quot;http://49.media.tumblr.com/6719493c95b322c8373afb6ccef98e23/tumblr_n8os443A2Q1sl21koo1_500.gif&quot;&gt;&lt;img src=&quot;http://49.media.tumblr.com/6719493c95b322c8373afb6ccef98e23/tumblr_n8os443A2Q1sl21koo1_500.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;We can safely start talking about the libraries we are going to use in the next post,&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://odyslam.github.io/rpi-setup-post/&quot;&gt;Setting up the Raspberry&lt;/a&gt; was originally published by Odysseas Lamtzidis at &lt;a href=&quot;http://odyslam.github.io&quot;&gt;Project L&lt;/a&gt; on March 22, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Raspberry pi 2]]></title>
 <link rel="alternate" type="text/html" href="http://odyslam.github.io/rpi-post/" />
  <id>http://odyslam.github.io/rpi-post</id>
  <updated>2016-04-21T00:00:00-00:00</updated>
  <published>2016-03-21T00:00:00+02:00</published>
  
  <author>
    <name>Odysseas Lamtzidis</name>
    <uri>http://odyslam.github.io</uri>
    <email>odyslam@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;hello-its-me-raspberry&quot;&gt;Hello, it’s me, Raspberry!&lt;/h2&gt;

&lt;p&gt;As you propably arleady know, Rpi is a small computer running a version of linux called Debian.Although it can run several more versions of linux, including custom ones that are made for specific purposes (i.e Voice Control), or Windows 10, Debian is by far the most common and versatile one.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;We are going to cover the setup later in the blog.&lt;/p&gt;

&lt;p&gt;It houses a wealth of hardware for a fairly limited price. Ranging from a camera display interface to 40 GPIO pin interface that transform rpi from a simple micro-computer to a versatile controler of electronic components.&lt;/p&gt;

&lt;h3 id=&quot;more-specifically&quot;&gt;More specifically:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;4 USB ports&lt;/li&gt;
  &lt;li&gt;40 GPIO pins&lt;/li&gt;
  &lt;li&gt;Full HDMI port&lt;/li&gt;
  &lt;li&gt;Ethernet port&lt;/li&gt;
  &lt;li&gt;Combined 3.5mm audio jack and composite video&lt;/li&gt;
  &lt;li&gt;Camera interface (CSI)&lt;/li&gt;
  &lt;li&gt;Display interface (DSI)&lt;/li&gt;
  &lt;li&gt;Micro SD card slot&lt;/li&gt;
  &lt;li&gt;VideoCore IV 3D graphics core&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am not going to explain more at this point as it’s better to explain the various capabilities with examples from my project. It’s worth though to mention the pinout diagram as it’s very important for any project.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;http://www.toptechboy.com/wp-content/uploads/2015/06/raspberry-pi-2-pinout.jpg&quot;&gt;&lt;img src=&quot;http://www.toptechboy.com/wp-content/uploads/2015/06/raspberry-pi-2-pinout.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;&lt;a href=&quot;http://www.toptechboy.com/wp-content/uploads/2015/06/raspberry-pi-2-pinout.jpg&quot; title=&quot;GPIO Pinout&quot;&gt;GPIO Pinout&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;but-what-are-those-pesky-gpio-anyhow&quot;&gt;But what are those pesky GPIO anyhow?&lt;/h2&gt;

&lt;p&gt;That’s a fair question, GPIO stands for “General Purpose Input Output” meaning that these pins can be used as digital inputs or digital outputs. There are also pins that act as power supply(providing either 5v or 3.3v) or as ground. Some GPIO also have special functions (like &lt;a href=&quot;https://learn.sparkfun.com/tutorials/pulse-width-modulation&quot;&gt;pulse width modulation&lt;/a&gt;)&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;REMEMBER&lt;/strong&gt;: Rpi use 3.3v as logical 1 and 0v as logical 0, unlike other microcontrolers,like &lt;em&gt;Arduino&lt;/em&gt; which use 5v.&lt;/p&gt;

&lt;h2 id=&quot;gpio-control&quot;&gt;GPIO control?&lt;/h2&gt;

&lt;p&gt;As you propably have guessed arleady,a gpio can be controlled through scripts in various languages that use specific libraries that do most of the dirty work. My personal favorite is python as it’s easily understandable and ridiculously versatile. For these reasonons our main focus will be python although we will need some linux scripting as well. For the web interface we will need some basic html/css/javascript.&lt;/p&gt;

&lt;h3 id=&quot;thats-all-folks&quot;&gt;That’s all folks&lt;/h3&gt;

&lt;p&gt;I think that you have the all the neaded material to understand the basics of the raspberry pi 2 next will follow an overview of the project and slowly we will start geting into the software side of it.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://odyslam.github.io/rpi-post/&quot;&gt;Raspberry pi 2&lt;/a&gt; was originally published by Odysseas Lamtzidis at &lt;a href=&quot;http://odyslam.github.io&quot;&gt;Project L&lt;/a&gt; on March 21, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[The Project]]></title>
 <link rel="alternate" type="text/html" href="http://odyslam.github.io/the-project-post/" />
  <id>http://odyslam.github.io/the-project-post</id>
  <updated>2016-04-20T00:00:00-00:00</updated>
  <published>2016-03-20T00:00:00+02:00</published>
  
  <author>
    <name>Odysseas Lamtzidis</name>
    <uri>http://odyslam.github.io</uri>
    <email>odyslam@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;the-idea&quot;&gt;The Idea&lt;/h2&gt;

&lt;p&gt;All started when I wanted to start exploring the world of electronics, which afterall is one of the subjects of my studies. Moreoever I wanted to start a usable project, something that would not only be &lt;em&gt;educative&lt;/em&gt;, but also &lt;em&gt;usefull&lt;/em&gt; . I also found IoT quite fancinating, something that is going to dominate the technology market in the next few decafed allong with-or in conjuction with - VR.&lt;/p&gt;

&lt;p&gt;I was starting from absolute 0, so &lt;em&gt;Arduino&lt;/em&gt; was the obvious choice because of it’s easy and straight-forward approach. The project did not evolve much as Arduino is fairly limited, especially if you want web capabilities.&lt;/p&gt;

&lt;p&gt;At this point, &lt;em&gt;Raspberry&lt;/em&gt; creeped in and suddenly everything turned green and shiny. It was able to do what I wanted and the best part? it’s codable in python, one of the easiest and most versatile programming languages I know.&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-that-fracking-project&quot;&gt;So what is that fracking project?&lt;/h2&gt;

&lt;p&gt;As I said it’s IoT related and more specifically in the area of smart-home. I have automated some tasks, like locking and unlocking my door, and I plan to add many features, all controlled via a Web Interface.I plan to explaing everything I have done in detail, and I hope that it serves as an easy guide for starters in order to dwelve into both the world of IoT and the world of Raspberry.&lt;/p&gt;

&lt;p&gt;So, in the next posts I will &lt;em&gt;explain&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;1)What I have accomplished thus far.&lt;/p&gt;

&lt;p&gt;2)What software I use, libraries and scripts.&lt;/p&gt;

&lt;p&gt;3)What’s my hardware.&lt;/p&gt;

&lt;p&gt;4)Future plans.&lt;/p&gt;

&lt;h1 id=&quot;sonow-what&quot;&gt;So..now what?&lt;/h1&gt;
&lt;p&gt;The project is currently frozen at ver 0.1 as I want to bring the blog up to date and then continue with it. At the next blog I will btiefly explain raspberry pi, just to make sure we are at the same page.&lt;/p&gt;

&lt;p&gt;Until then, cheers!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://odyslam.github.io/the-project-post/&quot;&gt;The Project&lt;/a&gt; was originally published by Odysseas Lamtzidis at &lt;a href=&quot;http://odyslam.github.io&quot;&gt;Project L&lt;/a&gt; on March 20, 2016.&lt;/p&gt;
  </content>
</entry>

</feed>
